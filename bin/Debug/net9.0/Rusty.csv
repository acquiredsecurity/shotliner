DateTime,TimestampInfo,ArtifactName,Tool,Description,DataDetails,DataPath,FileExtension,EventId,User,Computer,FileSize,IPAddress,SourceAddress,DestinationAddress,SHA1,Count,EvidencePath,RawData
2025-05-03T22:27:46.0000000,Start Time,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,ExecuteOpen,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:27:46.0000000,Last Modified,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,ExecuteOpen,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:27:46.0000000,Client Modified,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,ExecuteOpen,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:27:46.0000000,Start Time,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,InFocus,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:29:08.0000000,End Time,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,InFocus,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T00:01:22.0000000,Duration,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,InFocus,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:29:08.0000000,Last Modified,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,InFocus,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:29:08.0000000,Client Modified,WindowsTimelineActivity,EZ Tools,Windows Activity Timeline,InFocus,SentinelOne.WinAgent,,,,,,,,,,,FileFolderAccess/20250503174052_admin0x_Activity.csv,
2025-05-03T22:34:01.4811583,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/filecoauth.exe,.exe,,,,2182952,,,,1ee6cf719014526f95ba8c2961b018c1852198bf,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.4811583,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/filesyncconfig.exe,.exe,,,,813376,,,,50a4bce1b7cd12b1ad98cf4ba0324ea9088cf704,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.4974820,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/filesynchelper.exe,.exe,,,,3587904,,,,8001335c7ecc73db0ba0d97b991fe212683ff4cc,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.4974820,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/microsoft.sharepoint.nativemessagingclient.exe,.exe,,,,41256,,,,dad740c2a0482efecd662ad7732eb3e0cbb2096e,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.4974820,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/microsoft.sharepoint.exe,.exe,,,,1033032,,,,4639cd74a5ef57db79df417d97ac0664689de0a7,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.4974820,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/onedrivefilelauncher.exe,.exe,,,,396616,,,,168558107ec0b37d98e5eccc12b163763355957b,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.5131737,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/onedrivelauncher.exe,.exe,,,,679232,,,,ba3befc18edda17124e0925a21c8b745f113cb67,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.5289548,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/onedrivepatcher.exe,.exe,,,,3484504,,,,b8cf2a2de45a78e051fcc4f4ddad79a11f1482d2,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.6380923,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/onedrivesetup.exe,.exe,,,,89199416,,,,3809f744bb2ce16be7b4c286d074c9837dbe6201,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:34:01.6538633,Last Write,Amcache,EZ Tools,Program Execution,Microsoft OneDrive,c:/users/admin0x/appdata/local/microsoft/onedrive/25.065.0406.0002/onedriveupdaterservice.exe,.exe,,,,3841360,,,,5c3935ce88cf9209a64f0d53d43597b21432d765,,ProgramExecution/20250503174027_Amcache_AssociatedFileEntries.csv,
2025-05-03T22:27:28.2257751,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/users/admin0x/desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.exe,.exe,,,,3075072,,,,0751d0f22065a7cfa7e40d1b31fdc0b02e55f1e3,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9697690,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/cookie_exporter.exe,.exe,,,,117320,,,,41697210bc9b1b390e96f1b6482a698a8b1ebe83,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.8472443,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/cookie_exporter.exe,.exe,,,,123448,,,,6ca35c14e5965fea3d365146117c0bbad0bc326a,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:27:13.1971551,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/windows/system32/devicecensus.exe,.exe,,,,58704,,,,4817d7039b5b983b6c115fa6a6f16a71fe59fafd,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.8577645,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/elevated_tracing_service.exe,.exe,,,,3931216,,,,decfd358da4095a0bf8fdc41d909bcd315b769f3,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9808527,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/elevated_tracing_service.exe,.exe,,,,3874856,,,,be5fad5985e6b0b14e9d4361c91fe3005422c5dc,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9925317,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/elevation_service.exe,.exe,,,,2327624,,,,37a699f1a57819f3087f053fcf90a1c8b7578274,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.8689923,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/elevation_service.exe,.exe,,,,2348600,,,,bf370d3675c58af825f25ea0a311207ac0e0e418,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.8800962,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/identity_helper.exe,.exe,,,,1453120,,,,cbce799e0ca8f57249cbfb5b5875f72a4c848157,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0017247,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/identity_helper.exe,.exe,,,,1446952,,,,5a3e120146b549e8380f5b6403af3952a93a2557,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9675392,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/bho/ie_to_edge_stub.exe,.exe,,,,523840,,,,59ecc63075bca4639b651e6b9a235775a1497920,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.8472443,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/bho/ie_to_edge_stub.exe,.exe,,,,529448,,,,f2a0e56ad116ea7fa9b7ff5815ba4c3a56c0a397,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1374024,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgecomregistershellarm64.exe,.exe,,,,186464,,,,29995d65e0509d01c74a71e40ddfe1c79ed7f341,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.2131063,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgeupdatesetup.exe,.exe,,,,1649736,,,,a074d6087c51fc80e3e94997146b2f2d8d63c220,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.9470842,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/download/{f3c4fe00-efd5-403b-9569-398a20f1ba4a}/1.3.195.49/microsoftedgeupdatesetup_x86_1.3.195.49.exe,.exe,,,,1649736,,,,a074d6087c51fc80e3e94997146b2f2d8d63c220,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1671762,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgeupdatecomregistershell64.exe,.exe,,,,220232,,,,47d535ce4445b5b2c5408db9a28f8ec567fb5d82,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1806989,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgeupdateondemand.exe,.exe,,,,100936,,,,4b8b72c239f754c928648547a0e4b0190db54deb,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1698168,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgeupdatecore.exe,.exe,,,,268360,,,,8723d685335b4fdd513a53c829293fa3cbfd0436,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1564610,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgeupdatebroker.exe,.exe,,,,100960,,,,c0c028e32e7571397525c7b8be84db5c6d55dc95,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1480717,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/1.3.195.49/microsoftedgeupdate.exe,.exe,,,,206408,,,,3fe45c8d1f8239afad8f5ad7122f70208451a765,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.9047967,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/download/{f3017226-fe2a-4295-8bdf-00c3a9a7e4c5}/135.0.3179.98/microsoftedge_x64_135.0.3179.98.exe,.exe,,,,172498512,,,,4e2545d6dcbfcd5afd67c301c43edd3259fca615,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.4469903,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgeupdate/download/{56eb18f8-b008-4cbd-b6d2-8c97fe7e9062}/136.0.3240.50/microsoftedge_x64_136.0.3240.50.exe,.exe,,,,174214736,,,,00c81b961f887d54102c94fa59e423eb80d6b86d,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0465428,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/msedge.exe,.exe,,,,4045880,,,,7d6053a62f97e76159c3fdafa9b0ae91323ac103,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9224062,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/msedge.exe,.exe,,,,4419624,,,,f0028865f35deca1f19255d31190ba52e47e128d,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0710058,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/msedgewebview2.exe,.exe,,,,3472936,,,,03779b130dffa554a59bfc3bbe16a839d546b195,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9356959,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/msedgewebview2.exe,.exe,,,,3846728,,,,0d9482901b45194a5c04ebf5e03b720a63000dfd,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9356959,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/msedge_proxy.exe,.exe,,,,1479240,,,,3e00cf57829e63f14a19716929b66f2c333aa008,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0710058,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/msedge_proxy.exe,.exe,,,,1472552,,,,b8c85e75c501f9a1aee5bf48ed32ddb797c77340,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0815859,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/msedge_pwa_launcher.exe,.exe,,,,1874472,,,,29c3ec6ab021c362f5966dc05cbdafe3f234ca2c,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9466110,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/msedge_pwa_launcher.exe,.exe,,,,1881640,,,,25294af1c6cd44dca58a809f8d67216f2458f7f6,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:29.2257582,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files/windows defender/msmpeng.exe,.exe,,,,103384,,,,85536ad6afee43b728ed12ee8cffca41f74f6446,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9560226,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/notification_helper.exe,.exe,,,,1660488,,,,53a66d76b8090c5a8507b11a9a2cb8979dce7295,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0930237,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/notification_helper.exe,.exe,,,,1648168,,,,1ef182dd7c7f219517b783b8de8aa68dc2a6f875,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:29.0471594,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/users/admin0x/appdata/local/microsoft/onedrive/onedrive.exe,.exe,,,,2367352,,,,2d7da1c3bfa4755ba0efec5317260d239cbb51c3,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:27:18.5990798,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/users/admin0x/appdata/local/microsoft/onedrive/update/onedrivesetup.exe,.exe,,,,89199416,,,,3809f744bb2ce16be7b4c286d074c9837dbe6201,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9582656,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/pwahelper.exe,.exe,,,,1433664,,,,ccabe41fa309b3798600800f87e091375e39cd85,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.1268551,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/pwahelper.exe,.exe,,,,1428008,,,,75d56a841eb36280e24d0ff088255793e68d6fce,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:28.0261766,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/136.0.3240.50/installer/setup.exe,.exe,,,,7312424,,,,92ab91c725614d0e28bbcad5f7b527f20ee0ed09,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.9031385,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files (x86)/microsoft/edgecore/135.0.3179.98/installer/setup.exe,.exe,,,,7690792,,,,ce4cd576bab10c3da893402da198fde43efacdc2,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:27:27.6969933,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/windows/system32/sihclient.exe,.exe,,,,381224,,,,6698bb85552370ac4c8b952a0b4eb7749b6559b2,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.7145630,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files/sysmon/sysmon.exe,.exe,,,,8480560,,,,52f0d0cc4b573654f3844a8ff50fc503fb8f2f54,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:29.0788995,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/windows/sysmon64.exe,.exe,,,,4563248,,,,f82ac04c585970f462dd7a8d52a9a7bac23eaffa,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.7385093,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files/sysmon/sysmon64.exe,.exe,,,,4563248,,,,f82ac04c585970f462dd7a8d52a9a7bac23eaffa,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:27.7723876,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/program files/sysmon/sysmon64a.exe,.exe,,,,4993440,,,,ba232bb485b8da4661e8ada323a8e1c947afd1dd,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:29.1700257,Last Write,Amcache,EZ Tools,Program Execution,Unassociated,c:/windows/system32/vm3dservice.exe,.exe,,,,589968,,,,1ea4be149249f74ae69b79983ca71726b57032fe,,ProgramExecution/20250503174027_Amcache_UnassociatedFileEntries.csv,
2025-05-03T22:28:58.6913967,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_Disk', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId')],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${SerialNumber},,     [Parameter(ParameterSetName='ByPath', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByNumber', Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('DeviceId')],     [ValidateNotNull()],     [uint32[]],     ${Number},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByiSCSISession', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSISession')],     [ValidateNotNull()],     [ciminstance],     ${iSCSISession},,     [Parameter(ParameterSetName='ByiSCSIConnection', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSIConnection')],     [ValidateNotNull()],     [ciminstance],     ${iSCSIConnection},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageJob')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageJob')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageJob')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('SerialNumber') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${SerialNumber}),         $__cmdletization_queryBuilder.FilterByProperty('SerialNumber', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_DiskToPartition', 'Partition', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToDisk', 'VirtualDisk', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSISession') -and (@('ByiSCSISession') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSISession}, 'MSFT_iSCSISessionToDisk', 'iSCSISession', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSIConnection') -and (@('ByiSCSIConnection') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSIConnection}, 'MSFT_iSCSIConnectionToDisk', 'iSCSIConnection', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInst...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.6914207,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: yName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${Number},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.PartitionStyle],     ${PartitionStyle},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToDisk', 'VirtualDisk', 'Disk', 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'ByPath', 'ByNumber', 'ByVirtualDisk', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,             [object]$__cmdletization_value = ${PartitionStyle},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Initialize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Initialize-Disk' -Alias '*',         , function Clear-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumber', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${Number},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstanc...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.6915493,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: tch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'ByPath', 'ByNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RemoveData')) {,             [object]$__cmdletization_value = ${RemoveData},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveData'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveData'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RemoveOEM')) {,             [object]$__cmdletization_value = ${RemoveOEM},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveOEM'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveOEM'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Sanitize')) {,             [object]$__cmdletization_value = ${Sanitize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Sanitize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Sanitize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Clear', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Clear-Disk' -Alias '*',         , function New-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskPath},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${Size},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UseMaximumSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${Offset},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint32],     ${Alignment},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('NewDriveLetter')],     [char],     ${DriveLetter},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByP...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.6915740,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskPath') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskPath}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByPath', 'ByNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('UseMaximumSize')) {,             [object]$__cmdletization_value = ${UseMaximumSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Offset')) {,             [object]$__cmdletization_value = ${Offset},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Alignment')) {,             [object]$__cmdletization_value = ${Alignment},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Alignment'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Alignment'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DriveLetter')) {,             [object]$__cmdletization_value = ${DriveLetter},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AssignDriveLetter')) {,             [object]$__cmdletization_value = ${AssignDriveLetter},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MbrType')) {,             [object]$__cmdletization_value = ${MbrType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.CreatePartition.MbrType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.CreatePartition.MbrType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('GptType')) {,             [object]$__cmdletization_value = ${GptType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('IsHidden')) {,             [object]$__cmdletization_value = ${IsHidden},             $__cmdletization_met...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.6916686,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreatePartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-Partition' -Alias '*',         , function Update-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${Number},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'ByPath', 'ByNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Refresh', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Update-Disk' -Alias '*',         , function Enable-StorageHighAvailability, {,     [CmdletBinding(DefaultParameterSetName='ByDiskNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByDiskUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('DiskId')],     [ValidateNotNull()],     [string[]],     ${DiskUniqueId},,     [Parameter(ParameterSetName='ByDiskName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Disk...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.6916882,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskUniqueId') -and (@('ByDiskUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskFriendlyName') -and (@('ByDiskName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskPath') -and (@('ByDiskPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskPath}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByDiskNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByDiskUniqueId', 'ByDiskName', 'ByDiskPath', 'ByDiskNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ScaleOut')) {,             [object]$__cmdletization_value = ${ScaleOut},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScaleOut'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScaleOut'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnableHighAvailability', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Enable-StorageHighAvailability' -Alias '*',         , function Disable-StorageHighAvailability, {,     [CmdletBinding(DefaultParameterSetName='ByDiskNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByDiskUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('DiskId')],     [ValidateNotNull()],     [string[]],     ${DiskUniqueId},,     [Parameter(ParameterSetName='ByDiskName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskFriendlyName},,     [Parameter(ParameterSetName='ByDiskPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskPath},,     [Parameter(ParameterSetName='ByDiskNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskUniqueId') -and (@('ByDiskUniqueId') -contains $PSCmdlet.ParameterSetNam...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.6916928,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: lue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DisableHighAvailability', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disable-StorageHighAvailability' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.7593776,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_DiskImage', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-DiskImage, {,     [CmdletBinding(DefaultParameterSetName='ByImagePath', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_DiskImage')],     param(,     ,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByImagePath', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${ImagePath},,     [Parameter(ParameterSetName='ByDevicePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${DevicePath},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByImagePath', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDevicePath', ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.StorageType],     ${StorageType},,     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_DiskImageToVolume', 'Volume', 'DiskImage', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('ImagePath') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('ImagePath', ${ImagePath}),     },     if ($PSBoundParameters.ContainsKey('DevicePath') -and (@('ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('DevicePath', ${DevicePath}),     },     if ($PSBoundParameters.ContainsKey('StorageType') -and (@('ByVolume', 'ByImagePath', 'ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('VirtualStorageTypeDeviceId', ${StorageType}),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP DiskImage.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-DiskImage' -Alias '*',         , function Mount-DiskImage, {,     [CmdletBinding(DefaultParameterSetName='ByImagePath', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     param(,     ,     [Parameter(ParameterSetName='ByImagePath', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${ImagePath},,     [Parameter(ParameterSetName='ByImagePath', ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.StorageType],     ${StorageType},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.Access],     ${Access},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${NoDriveLetter},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ImagePath') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('ImagePath', ${ImagePath}),     },     if ($PSBoundParameters.ContainsKey('StorageType') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOp...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.7593905,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: alBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     param(,     ,     [Parameter(ParameterSetName='ByImagePath', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${ImagePath},,     [Parameter(ParameterSetName='ByDevicePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${DevicePath},,     [Parameter(ParameterSetName='ByImagePath', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDevicePath', ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.StorageType],     ${StorageType},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ImagePath') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('ImagePath', ${ImagePath}),     },     if ($PSBoundParameters.ContainsKey('DevicePath') -and (@('ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('DevicePath', ${DevicePath}),     },     if ($PSBoundParameters.ContainsKey('StorageType') -and (@('ByImagePath', 'ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('VirtualStorageTypeDeviceId', ${StorageType}),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByImagePath', 'ByDevicePath', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskImage'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Dismount', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP DiskImage.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Dismount-DiskImage' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.8065362,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileIntegrity', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-FileIntegrity, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileIntegrity')],     param(,     ,     [Parameter(ParameterSetName='Get0', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('FullName')],     [string],     ${FileName},,     [Parameter(ParameterSetName='Get0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Get0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Get0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileName')) {,           [object]$__cmdletization_value = ${FileName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileIntegrity'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_FileIntegrity',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileIntegrity.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-FileIntegrity' -Alias '*',         , function Set-FileIntegrity, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Set1', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('FullName')],     [string],     ${FileName},,     [Parameter(ParameterSetName='Set1', Position=1)],     [bool],     ${Enable},,     [Parameter(ParameterSetName='Set1')],     [bool],     ${Enforce},,     [Parameter(ParameterSetName='Set1')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Set1')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Set1')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileName')) {,           [object]$__cmdletization_value = ${FileName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Enable')) {,           [object]$__cmdletization_value = ${Enable},           $__cmdletization_methodParameter = [Microsoft.PowerShell....[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.8350310,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileServer', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , $script:PrivateData.Add('ClientSideShouldProcess', ''), function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageFileServer, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileServer')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${Subsystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='BySubsystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='BySubsystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='BySubsystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Subsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Subsystem}, 'MSFT_StorageSubsystemToFileServer', 'StorageSubsystem', 'FileServer', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileServer.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageFileServer' -Alias '*',         , function Remove-StorageFileServer, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileServer')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.8350715,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: meterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,             [object]$__cmdletization_value = ${NewFriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFriendlyName', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileServer.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageFileServer' -Alias '*',         , function New-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${FileServerUniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${FileServerFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Description},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${SourceVolume},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${RelativePathName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${ContinuouslyAvailable},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${EncryptData},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileServer.FileSharingProtocol],     ${Protocol},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdl...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.8350829,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ame = 'SourceVolume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RelativePathName')) {,             [object]$__cmdletization_value = ${RelativePathName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeRelativePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeRelativePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ContinuouslyAvailable')) {,             [object]$__cmdletization_value = ${ContinuouslyAvailable},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ContinuouslyAvailable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ContinuouslyAvailable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('EncryptData')) {,             [object]$__cmdletization_value = ${EncryptData},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Protocol')) {,             [object]$__cmdletization_value = ${Protocol},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSharingProtocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileServer.FileSharingProtocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSharingProtocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileServer.FileSharingProtocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedFileShare'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateFileShare', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileServer.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-FileShare' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9075790,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileShare', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , $script:PrivateData.Add('ClientSideShouldProcess', ''), function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByFileServer', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileShare.FileSharingProtocol[]],     ${Protocol},,     [Parameter(ParameterSetName='ByFileServer', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${Subsystem},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByFileServer', 'BySubsystem', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByFileServer', 'BySubsystem', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Protocol}),         $__cmdletization_queryBuilder.FilterByProperty('FileSharingProtocol', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByFileServer') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Subsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Subsystem}, 'MSFT_StorageSubsystemToFileShare', 'StorageSubsystem', 'FileShare', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_VolumeToFileShare', 'Volume', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-FileShare' -Alias '*',         , function Remove-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVer...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9076310,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Session[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccountName')) {,             [object]$__cmdletization_value = ${AccountName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccessRight')) {,             [object]$__cmdletization_value = ${AccessRight},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessRight'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileShare.AccessRight'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessRight'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileShare.AccessRight'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GrantAccess', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Grant-FileShareAccess' -Alias '*',         , function Block-FileShareAccess, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${AccountName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9076626,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: utObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccountName')) {,             [object]$__cmdletization_value = ${AccountName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RevokeAccess', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Revoke-FileShareAccess' -Alias '*',         , function Unblock-FileShareAccess, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${AccountName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9076748,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: etization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessControlEntries'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShareAccessControlEntry[]',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetAccessControlEntries', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-FileShareAccessControlEntry' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9404791,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileStorageTier', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-FileStorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByVolumeDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])],     param(,     ,     [Parameter(ParameterSetName='ByVolumeDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [char],     ${VolumeDriveLetter},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState],     ${PinnedState},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass],     ${PinnedStorageTierClass},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass],     ${AllocatedStorageTierClass},,     [Parameter(ParameterSetName='ByVolumePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${VolumePath},,     [Parameter(ParameterSetName='ByVolume', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByFilePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${FilePath},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByVolumeDriveLetter') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VolumeDriveLetter')) {,           [object]$__cmdletization_value = ${VolumeDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedState')) {,           [object]$__cmdletization_value = ${PinnedState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedStorageTierClass')) {,           [object]$__cmdletization_value = ${PinnedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocatedStorageTierClass')) {,           [object]$__cmdletization_value = ${AllocatedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileStorageTier'; ParameterType = 'Microsoft...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9405032,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: mdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedStorageTierClass')) {,           [object]$__cmdletization_value = ${PinnedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocatedStorageTierClass')) {,           [object]$__cmdletization_value = ${AllocatedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileStorageTier'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFilePath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedState')) {,           [object]$__cmdletization_value = ${PinnedState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedStorageTierClass')) {,           [object]$__cmdletization_value = ${PinnedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocatedStorageTierClass')) {,           [object]$__cmdletization_value = ${AllocatedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileStorageTier'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileStorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-FileStorageTier' -Alias '*',         , function Set-FileStorageTier, {,     [Cmdle...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9405178,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: esent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDesiredStorageTier') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DesiredStorageTier')) {,           [object]$__cmdletization_value = ${DesiredStorageTier},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTier'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTier'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDesiredStorageTierClass') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DesiredStorageTierClass')) {,           [object]$__cmdletization_value = ${DesiredStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileStorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-FileStorageTier' -Alias '*',         , function Clear-FileStorageTier, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Clear0', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${FilePath},,     [Parameter(ParameterSetName='Clear0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Clear0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Clear0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.Meth...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9637187,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_InitiatorId', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-InitiatorId, {,     [CmdletBinding(DefaultParameterSetName='ByAddress', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorId')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByAddress', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${InitiatorAddress},,     [Parameter(ParameterSetName='ByAddress', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.InitiatorId.HostType[]],     ${HostType},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('InitiatorAddress') -and (@('ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${InitiatorAddress}),         $__cmdletization_queryBuilder.FilterByProperty('InitiatorAddress', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HostType') -and (@('ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HostType}),         $__cmdletization_queryBuilder.FilterByProperty('HostType', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_MaskingSetToInitiatorId', 'MaskingSet', 'InitiatorId', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_InitiatorIdToVirtualDisk', 'VirtualDisk', 'InitiatorId', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToInitiatorId', 'StorageSubSystem', 'InitiatorId', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP InitiatorId.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-InitiatorId' -Alias '*',         , function Remove-InitiatorId, {,     [CmdletBinding(DefaultParameterSetName='ByAddress', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorId')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByAddress', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${InitiatorAddress},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWr...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:58.9847403,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_InitiatorPort', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-InitiatorPort, {,     [CmdletBinding(DefaultParameterSetName='ByNodeAddress', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorPort')],     param(,     ,     [Parameter(ParameterSetName='ByObjectId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByNodeAddress', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${NodeAddress},,     [Parameter(ParameterSetName='ByInstanceName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${InstanceName},,     [Parameter(ParameterSetName='ByNodeAddress', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByInstanceName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.InitiatorPort.ConnectionType[]],     ${ConnectionType},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByiSCSISession', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSISession')],     [ValidateNotNull()],     [ciminstance],     ${iSCSISession},,     [Parameter(ParameterSetName='ByiSCSIConnection', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSIConnection')],     [ValidateNotNull()],     [ciminstance],     ${iSCSIConnection},,     [Parameter(ParameterSetName='ByiSCSITarget', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSITarget')],     [ValidateNotNull()],     [ciminstance],     ${iSCSITarget},,     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByNodeAddress')],     [Parameter(ParameterSetName='ByInstanceName')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByiSCSITarget')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByNodeAddress')],     [Parameter(ParameterSetName='ByInstanceName')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByiSCSITarget')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByNodeAddress')],     [Parameter(ParameterSetName='ByInstanceName')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByiSCSITarget')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ByObjectId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('NodeAddress') -and (@('ByNodeAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${NodeAddress}),         $__cmdletization_queryBuilder.FilterByProperty('NodeAddress', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('InstanceName') -and (@('ByInstanceName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${InstanceName}),         $__cmdletization_queryBuilder.FilterByProperty('InstanceName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ConnectionType') -and (@('ByNodeAddress', 'ByInstanceName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ConnectionType}),         $__cmdletization_queryBuilder.FilterByProperty('ConnectionType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToInitiatorPort', 'VirtualDisk', 'InitiatorPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSISession') -and (@('ByiSCSISession') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSISession}, 'MSFT_InitiatorPortToiSCSISession', 'iSCSISession', 'InitiatorPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSIConnection') -and (@('ByiSCSIConnection') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSIConnection}, 'MSFT_InitiatorPortToiSCSIConnection', 'iSCSIConnection', 'InitiatorPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSITarget') -and (@('ByiSCSITarget') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSITarget}, 'MSFT_InitiatorPortToiSCSITarget', 'iSCSITarget', 'InitiatorPort', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP InitiatorPort.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-InitiatorPort' -Alias '*',         , function Set-InitiatorPort, {,     [CmdletBinding(DefaultParameterSetName='ByNodeAddress', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorPort')],     param(,     ,     [Parameter(ParameterSetName='ByObjectId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByNodeAddress', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [strin...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0442603,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.HostType[]],     ${HostType},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ${TargetPort},,     [Parameter(ParameterSetName='ByInitiatorId', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorId},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HostType') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HostType}),         $__cmdletization_queryBuilder.FilterByProperty('HostType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_MaskingSetToTargetPort', 'TargetPort', 'MaskingSet', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorId') -and (@('ByInitiatorId') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorId}, 'MSFT_MaskingSetToInitiatorId', 'InitiatorId', 'MaskingSet', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToMaskingSet', 'StorageSubSystem', 'MaskingSet', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_MaskingSetToVirtualDisk', 'VirtualDisk', 'MaskingSet', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-MaskingSet' -Alias '*',         , function Remove-MaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0442995,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,             [object]$__cmdletization_value = ${NewFriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFriendlyName', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Rename-MaskingSet' -Alias '*',         , function Add-InitiatorIdToMaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${InitiatorIds},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.HostType],     ${HostType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSetFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorIds')) {,             [object]$__cmdletization_value = ${InitiatorIds},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorIds';...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0443488,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: riendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorIds')) {,             [object]$__cmdletization_value = ${InitiatorIds},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorIds'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorIds'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemoveInitiatorId', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-InitiatorIdFromMaskingSet' -Alias '*',         , function Add-TargetPortToMaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSetFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetPortAddresses')) {,             [object]$__cmdletization_value = ${TargetPortAddresses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddTargetPort', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletizat...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0443852,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-TargetPortFromMaskingSet' -Alias '*',         , function Add-VirtualDiskToMaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${VirtualDisknames},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16[]],     ${DeviceNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.AddVirtualDisk.DeviceAccess[]],     ${DeviceAccesses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSetFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('VirtualDisknames')) {,             [object]$__cmdletization_value = ${VirtualDisknames},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisknames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisknames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DeviceNumbers')) {,             [object]$__cmdletization_value = ${DeviceNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceNumbers'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceNumbers'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DeviceAccesses')) {,             [object]$__cmdletization_value = ${DeviceAccesses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.AddVirtualDisk.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.AddVirtualDisk.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0443926,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: tion_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-VirtualDiskFromMaskingSet' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0644596,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_OffloadDataTransferSetting', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-OffloadDataTransferSetting, {,     [CmdletBinding(DefaultParameterSetName='ByStorageSubSystem', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_OffloadDataTransferSetting')],     param(,     ,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToOffloadDataTransferSetting', 'StorageSubSystem', 'OffloadDataTransferSetting', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP OffloadDataTransferSetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-OffloadDataTransferSetting' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0868967,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_Partition', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('DiskPath')],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_DiskToPartition', 'Disk', 'Partition', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_PartitionToVolume', 'Volume', 'Partition', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToPartition', 'StorageSubSystem', 'Partition', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-Partition' -Alias '*',         , function Remove-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0869187,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: r.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DeleteObject', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-Partition' -Alias '*',         , function Resize-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Mandatory=$true, Position=2)],     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=2)],     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=2)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, Position=2)],     [uint64],     ${Size},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodP...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0869397,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: e)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SizeMin'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SizeMax'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedSize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-PartitionSupportedSize' -Alias '*',         , function Add-PartitionAccessPath, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Position=2)],     [Parameter(ParameterSetName='ByNumber', Position=2)],     [Parameter(ParameterSetName='ByDriveLetter', Position=2)],     [Parameter(ParameterSetName='InputObject (cdxml)', Position=2)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AccessPath},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AssignDriveLetter},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0869550,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: lse, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccessPath')) {,             [object]$__cmdletization_value = ${AccessPath},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AssignDriveLetter')) {,             [object]$__cmdletization_value = ${AssignDriveLetter},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddAccessPath', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Add-PartitionAccessPath' -Alias '*',         , function Remove-PartitionAccessPath, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Position=2)],     [Parameter(ParameterSetName='ByNumber', Position=2)],     [Parameter(ParameterSetName='ByDriveLetter', Position=2)],     [Parameter(ParameterSetName='InputObject (cdxml)', Position=2)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AccessPath},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_query...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.0869605,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-PartitionAccessPath' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.1012647,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_PhysicalDisk', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.1193002,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_ResiliencySetting', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-ResiliencySetting, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_ResiliencySetting')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToResiliencySetting', 'StoragePool', 'ResiliencySetting', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP ResiliencySetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-ResiliencySetting' -Alias '*',         , function Set-ResiliencySetting, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_ResiliencySetting')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_ResiliencySetting')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfDataCopiesDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${PhysicalDiskRedundancyDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfColumnsDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AutoNumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${InterleaveDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfGroupsDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Proces...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3777177,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/PS_StorageCmdlets', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Set-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumberAttributes', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectConvertStyle', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle],     ${PartitionStyle},,     [Parameter(ParameterSetName='ByIdConvertStyle', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByPathConvertStyle', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByPathAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Path},,     [Parameter(ParameterSetName='ByNumberConvertStyle', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNumberAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [uint32],     ${Number},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [bool],     ${IsOffline},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsReadOnly},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [uint32],     ${Signature},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [string],     ${Guid},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectConvertStyle') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3777299,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPathConvertStyle') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumberConvertStyle') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Number')) {,           [object]$__cmdletization_value = ${Number},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Number'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Number'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdle...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3777558,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ion_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumber') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Number')) {,           [object]$__cmdletization_value = ${Number},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Number'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Number'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletiza...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3777697,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: on.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Guid')) {,           [object]$__cmdletization_value = ${Guid},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPathAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Guid')) {,           [object]$__cmdletization_value = ${Guid},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumberAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3777817,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: crosoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Guid')) {,           [object]$__cmdletization_value = ${Guid},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-Disk' -Alias '*',         , function Set-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetterSetLabel', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Alias('NewFriendlyName')],     [string],     ${NewFileSystemLabel},,     [Parameter(ParameterSetName='ByUniqueIdSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByUniqueIdSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByPathSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByPathSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [string],     ${Path},,     [Parameter(ParameterSetName='ByLabelSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByLabelSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [Alias('FriendlyName')],     [string],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetterSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByDriveLetterSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [char],     ${DriveLetter},,     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode],     ${DedupMode},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInst...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3777930,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: rs.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,           [object]$__cmdletization_value = ${NewFileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPathSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,           [object]$__cmdletization_value = ${NewFileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByLabelSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileSystemLabel')) {,           [object]$__cmdletization_value = ${FileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,           [object]$__cmdletization_value = ${NewFileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmd...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3778143,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ct]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPathSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByLabelSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileSystemLabel')) {,           [object]$__cmdletization_value = ${FileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletiz...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3778271,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ,         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-Volume' -Alias '*',         , function Set-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByNumberAttributes', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAccessPath', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsReadOnly},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${NoDefaultDriveLetter},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsActive},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsHidden},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsShadowCopy},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsDAX},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [uint16],     ${MbrType},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [string],     ${GptType},,     [Parameter(ParameterSetName='ByIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByIdAccessPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${DiskId},,     [Parameter(ParameterSetName='ByIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByIdAccessPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [uint64],     ${Offset},,     [Parameter(ParameterSetName='ByDriveLetterAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDriveLetterAccessPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [char],     ${DriveLetter},,     [Parameter(ParameterSetName='ByNumberAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNumberAccessPath', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [uint32],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumberAttributes', Mandatory=$true, Position=1)],     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=1)],     [Parameter(ParameterSetName='ByNumberAccessPath', Mandatory=$true, Position=1)],     [Alias('Number')],     [uint32],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByNumber')],     [bool],     ${IsOffline},,     [Parameter(ParameterSetName='ByObjectAccessPath')],     [Parameter(ParameterSetName='ByIdAccessPath')],     [Parameter(ParameterSetName='ByDriveLetterAccessPath')],     [Parameter(ParameterSetName='ByNumberAccessPath')],     [char],     ${NewDriveLetter},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAccessPath')],     [Parameter(ParameterSetName='ByIdAccessPath')],     [Parameter(ParameterSetName='ByDriveLetterAccessPath')],     [Parameter(ParameterSetName='ByNumberAccessPath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},, ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3778378,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAccessPath')],     [Parameter(ParameterSetName='ByIdAccessPath')],     [Parameter(ParameterSetName='ByDriveLetterAccessPath')],     [Parameter(ParameterSetName='ByNumberAccessPath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NoDefaultDriveLetter')) {,           [object]$__cmdletization_value = ${NoDefaultDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; Paramet...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3778490,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Offset')) {,           [object]$__cmdletization_value = ${Offset},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NoDefaultDriveLetter')) {,           [object]$__cmdletization_value = ${NoDefaultDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,     ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3778852,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: arameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumberAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskNumber')) {,           [object]$__cmdletization_value = ${DiskNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionNumber')) {,           [object]$__cmdletization_value = ${PartitionNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NoDefaultDriveLetter')) {,           [object]$__cmdletization_value = ${NoDefaultDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3778985,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Key('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ById') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskId')) {,           [object]$__cmdletization_value = ${DiskId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Offset')) {,           [object]$__cmdletization_value = ${Offset},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Mi...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3779749,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: mdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetter') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumber') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskNumber')) {,           [object]$__cmdletization_value = ${DiskNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionNumber')) {,           [object]$__cmdletization_value = ${PartitionNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAccessPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDriveLetter')) {,           [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByIdAccessPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskId')) {,           [object]$__cmdletization_value = ${DiskId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },        ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3779876,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: iveLetter')) {,           [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterAccessPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDriveLetter')) {,           [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumberAccessPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskNumber')) {,           [object]$__cmdletization_value = ${DiskNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionNumber')) {,           [object]$__cmdletization_value = ${PartitionNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDriveLetter')) {,           [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-Partition' -Alias '*',         , function Set-PhysicalDisk, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${Description},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType],     ${MediaType},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${StorageEnclosureId},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Par...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3779980,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageEnclosureId')) {,           [object]$__cmdletization_value = ${StorageEnclosureId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageScaleUnitId')) {,           [object]$__cmdletization_value = ${StorageScaleUnitId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780089,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: eter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageEnclosureId')) {,           [object]$__cmdletization_value = ${StorageEnclosureId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageScaleUnitId')) {,           [object]$__cmdletization_value = ${StorageScaleUnitId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780198,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: dParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageEnclosureId')) {,           [object]$__cmdletization_value = ${StorageEnclosureId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageScaleUnitId')) {,           [object]$__cmdletization_value = ${StorageScaleUnitId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-PhysicalDisk' -Alias '*',         , function Set-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectDefaults', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [bool],     ${ClearOnDeallocate},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [bool],     ${IsPowerProtected},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy],     ${RepairPolicy},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks],     ${RetireMissingPhysicalDisks},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Alias('NewUsage')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Alias('NewOtherUsageDescription')],     [string],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [uint16[]],     ${ThinProvisioningAlertThresholds},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdDefaults', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameDefaults', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameDefaults', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType],     ${ProvisioningTypeDefault},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType],     ${MediaTypeDefault},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [string],     ${ResiliencySettingNameDefault},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [bool],     ${EnclosureAwareDefault},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${FaultDomainAwarenessDefault},,     [Par...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780301,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: meter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParame...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780406,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: visioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThinProvisioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },       ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780510,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ation_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThinProvisioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmd...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780627,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThinProvisioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectDefaults') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,           [object]$__cmdletization_value = ${ProvisioningTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,           [object]$__cmdletization_value = ${MediaTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletiz...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780731,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: oft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,           [object]$__cmdletization_value = ${WriteCacheSizeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdDefaults') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,           [object]$__cmdletization_value = ${ProvisioningTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,           [object]$__cmdletization_value = ${MediaTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingNameDefault')) {,           [object]$__cmdletization_value = ${ResiliencySettingNameDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomain...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780837,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: er = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameDefaults') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,           [object]$__cmdletization_value = ${ProvisioningTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,           [object]$__cmdletization_value = ${MediaTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingNameDefault')) {,           [object]$__cmdletization_value = ${ResiliencySettingNameDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,           [object]$__cmdletization_value = ${WriteCacheSizeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdlet...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3780938,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,           [object]$__cmdletization_value = ${ProvisioningTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,           [object]$__cmdletization_value = ${MediaTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingNameDefault')) {,           [object]$__cmdletization_value = ${ResiliencySettingNameDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,           [object]$__cmdletization_value = ${WriteCacheSizeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindi...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781153,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: sRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StoragePool' -Alias '*',         , function Set-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectProperties', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='By...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781286,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameProperties', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [bool],     ${IsManualAttach},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [string],     ${StorageNodeName},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access],     ${Access},,     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [Alias('FaultDomainRedundancy')],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781401,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: faultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $_...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781514,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781626,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: sPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectProperties') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $f...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781729,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdProperties') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameProperties') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781833,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: eter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameProperties') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-VirtualDisk' -Alias '*',         , function Set-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueIdNewFriendlyName', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectNewFriendlyName', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectDescription', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [uint64],     ${AllocationUnitSize},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType],     ${MediaType},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${ColumnIsolation},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage],     ${Usage},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Alias('FaultDomainRedundancy')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfGroups},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint64],     ${Interleave},,     [Parameter...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3781937,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: meter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectNewFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,           [object]$__cmdletization_value = ${AllocationUnitSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletiza...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782052,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: lueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,           [object]$__cmdletization_value = ${ColumnIsolation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,           [object]$__cmdletization_value = ${ResiliencySettingName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfGroups')) {,           [object]$__cmdletization_value = ${NumberOfGroups},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,           [object]$__cmdletization_value = ${NumberOfColumns},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Interleave')) {,           [object]$__cmdletization_value = ${Interleave},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Micr...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782155,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: $__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,           [object]$__cmdletization_value = ${AllocationUnitSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,           [object]$__cmdletization_value = ${FaultDomainAwareness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,           [object]$__cmdletization_value = ${ColumnIsolation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,           [object]$__cmdletization_value = ${ResiliencySettingName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add(...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782261,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: meters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfGroups')) {,           [object]$__cmdletization_value = ${NumberOfGroups},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,           [object]$__cmdletization_value = ${NumberOfColumns},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Interleave')) {,           [object]$__cmdletization_value = ${Interleave},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameNewFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782365,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ype'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,           [object]$__cmdletization_value = ${AllocationUnitSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,           [object]$__cmdletization_value = ${FaultDomainAwareness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,           [object]$__cmdletization_value = ${ColumnIsolation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,           [object]$__cmdletization_value = ${ResiliencySettingName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfGroups')) {,           [object]$__cmdletization_value = ${NumberOfGroups},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,           [object]$__cmdletization_value = ${NumberOfColumns},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Interleave')) {,           [object]$__cmdletization_value = ${Interleave},           $__cmdl...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782470,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageTier' -Alias '*',         , function Set-StorageSubSystem, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueIdDescription', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectDescription', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectSetAttributes', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${Description},,     [Parameter(ParameterSetName='ByUniqueIdDescription', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyNameDescription', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByNameDescription', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameSetAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [bool],     ${AutomaticClusteringEnabled},,     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${FaultDomainAwarenessDefault},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings =...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782576,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:      [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletizatio...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782681,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: arameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutomaticClusteringEnabled')) {,           [object]$__cmdletization_value = ${AutomaticClusteringEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutomaticClusteringEnabled')) {,           [object]$__cmdletization_value = ${AutomaticClusteringEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782783,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageSubSystem' -Alias '*',         , function Add-PhysicalDisk, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDisk', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskName', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisks},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolFriendlyName},,     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolName},,     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolUniqueId},,     [Parameter(ParameterSetName='ByVirtualDisk', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByVirtualDiskName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskName},,     [Parameter(ParameterSetName='ByVirtualDiskUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskUniqueId},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByStoragePool') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePool')) {,           [object]$__cmdletization_value = ${StoragePool},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameter...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782889,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: SBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName')) {,           [object]$__cmdletization_value = ${StoragePoolFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolName')) {,           [object]$__cmdletization_value = ${StoragePoolName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolUniqueId')) {,           [object]$__cmdletization_value = ${StoragePoolUniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolUniqueId'; P...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3782994,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: soft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDisk')) {,           [object]$__cmdletization_value = ${VirtualDisk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName')) {,           [object]$__cmdletization_value = ${VirtualDiskFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskName')) {,           [object]$__cmdletization_value = ${VirtualDiskName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPa...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3783103,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskUniqueId')) {,           [object]$__cmdletization_value = ${VirtualDiskUniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Add-PhysicalDisk' -Alias '*',         , function Remove-PhysicalDisk, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDisk', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskName', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisks},,     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolFriendlyName},,     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolName},,     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolUniqueId},,     [Parameter(ParameterSetName='ByVirtualDisk', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByVirtualDiskName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskName},,     [Parameter(ParameterSetName='ByVirtualDiskUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskUniqueId},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByStoragePool') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePool')) {,           [object]$__cmdletization_value = ${StoragePool},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.Ci...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3783217,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: e.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName')) {,           [object]$__cmdletization_value = ${StoragePoolFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolName')) {,           [object]$__cmdletization_value = ${StoragePoolName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolUniqueId')) {,           [object]$__cmdletization_value = ${StoragePoolUniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultV...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3783324,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: erShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName')) {,           [object]$__cmdletization_value = ${VirtualDiskFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskName')) {,           [object]$__cmdletization_value = ${VirtualDiskName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskUniqueId')) {,           [object]$__cmdletization_value = ${VirtualDiskUniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; Parameter...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3783438,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-PhysicalDisk' -Alias '*',         , function Set-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${Description},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [bool],     ${EncryptData},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EncryptData')) {,           [object]$__cmdletization_value = ${EncryptData},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFileShare', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EncryptData')) {,           [object]$__cmdletization_value = ${EncryptData},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletiz...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3783952,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: etization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EncryptData')) {,           [object]$__cmdletization_value = ${EncryptData},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFileShare', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-FileShare' -Alias '*',         , function Get-StorageReliabilityCounter, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter')][OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter')],     param(,     ,     [Parameter(ParameterSetName='ByPhysicalDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByPhysicalDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisk')) {,           [object]$__cmdletization_value = ${PhysicalDisk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageReliabilityCounter'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetStorageReliabilityCounter', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Disk')) {,           [object]$__cmdletization_value = ${Disk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Disk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Disk'; ParameterType = '...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.3784003,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: etization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetStorageReliabilityCounter', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageReliabilityCounter' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.4622765,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageEnclosure, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByFriendlyName', Position=1, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${SerialNumber},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [ValidateNotNull()],     [string[]],     ${Model},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageEnclosure.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByStorageNode')],     [switch],     ${PhysicallyConnected},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('SerialNumber') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${SerialNumber}),         $__cmdletization_queryBuilder.FilterByProperty('SerialNumber', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Manufacturer') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStorageSubSystem', 'ByStorageNode', 'ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Manufacturer}),         $__cmdletization_queryBuilder.FilterByProperty('Manufacturer', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Model') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStorageSubSystem', 'ByStorageNode', 'ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Model}),         $__cmdletization_queryBuilder.FilterByProperty('Model', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HealthStatus') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStorageSubSystem', 'ByStorageNode', 'ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HealthStatus}),         $__cmdletization_queryBuilder.FilterByProperty('HealthStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToStorageEnclosure', 'StorageSubSystem', 'StorageEnclosure', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageNode') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageNodeToStorageEnclosure', 'StorageNode', 'StorageEnclosure', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicalDisk') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${PhysicalDisk}, 'MSFT_StorageEnclosureToPhysicalDisk', 'PhysicalDisk', 'StorageEnclosure', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicallyConnected') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('PhysicallyConnected', ${PhysicallyConnected}),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.4623056,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ,     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('true', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enable'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('IdentifyElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Enable-StorageEnclosureIdentification' -Alias '*',         , function Disable-StorageEnclosureIdentification, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32[]],     ${SlotNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),  ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.4623193,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: dParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('IdentifyElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disable-StorageEnclosureIdentification' -Alias '*',         , function Get-StorageEnclosureVendorData, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([System.String])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${PageNumber},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PageNumber')) {,             [object]$__cmdletization_value = ${PageNumber},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PageNumber'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PageNumber'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VendorData'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetVendorData', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageEnclosureVendorData' -Alias '*',         , function Enable-StorageEnclosurePower, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [cimins...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.4623318,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Off'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('PowerElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Enable-StorageEnclosurePower' -Alias '*',         , function Disable-StorageEnclosurePower, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32[]],     ${SlotNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('true', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Off'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbe...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.4623368,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: onHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disable-StorageEnclosurePower' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.5019096,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageJob', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageJob, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageJob')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageJob.JobState[]],     ${JobState},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubsystem},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('JobState') -and (@('ByUniqueId', 'ByName', 'ByStorageSubSystem', 'ByStoragePool', 'ByVirtualDisk', 'ByDisk', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${JobState}),         $__cmdletization_queryBuilder.FilterByProperty('JobState', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubsystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubsystem}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageJob.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageJob' -Alias '*',         , function Stop-StorageJob, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageJob')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetN...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.5750260,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageHealth, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${Subsystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='BySubsystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='BySubsystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='BySubsystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Subsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Subsystem}, 'MSFT_StorageSubsystemToStorageHealth', 'StorageSubsystem', 'StorageHealth', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageHealth.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageHealth' -Alias '*',         , function Get-StorageHealthSettingInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealthSetting[]')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealth')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Name')) {,             [object]$__cmdletization_value = ${Name},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__c...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.5750426,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageHealth.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageHealthSettingInternal' -Alias '*',         , function Set-StorageHealthSettingInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealth')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Value},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Name')) {,             [object]$__cmdletization_value = ${Name},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Value')) {,             [object]$__cmdletization_value = ${Value},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Value'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Value'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetSetting', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageHealth.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageHealthSettingInternal' -Alias '*',         , function Remove-StorageHealthSettingInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealth')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicPara...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.5750482,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: dletization_value = ${Name},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemoveSetting', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageHealth.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-StorageHealthSettingInternal' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6187260,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageNode', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageNode, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageNode')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByObjectId', ValueFromPipelineByPropertyName=$true)],     [Alias('StorageNodeObjectId')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageNode.OperationalStatus[]],     ${OperationalStatus},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageEnclosure', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance],     ${StorageEnclosure},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [switch],     ${PhysicallyConnected},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ByObjectId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('OperationalStatus') -and (@('ByUniqueId', 'ByObjectId', 'ByName', 'ByDisk', 'ByStorageSubSystem', 'ByStorageEnclosure', 'ByStoragePool', 'ByPhysicalDisk', 'ByVirtualDisk', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${OperationalStatus}),         $__cmdletization_queryBuilder.FilterByProperty('OperationalStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_StorageNodeToDisk', 'Disk', 'StorageNode', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToStorageNode', 'StorageSubSystem', 'StorageNode', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageEnclosure') -and (@('ByStorageEnclosure') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageEnclosure}, 'MSFT_StorageNodeToStorageEnclosure', 'StorageEnclosure', 'StorageNode', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStorage...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6896153,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StoragePool', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StoragePool')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUsage', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.Usage[]],     ${Usage},,     [Parameter(ParameterSetName='ByUsage', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [bool[]],     ${IsPrimordial},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByResiliencySetting', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_ResiliencySetting')],     [ValidateNotNull()],     [ciminstance],     ${ResiliencySetting},,     [Parameter(ParameterSetName='ByStorageTier', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance],     ${StorageTier},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6896737,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.CreateVirtualDisk.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('VirtualDiskOtherUsageDescription')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint64],     ${Size},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UseMaximumSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${AllocationUnitSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType],     ${MediaType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${IsEnclosureAware},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType],     ${ColumnIsolation},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisksToUse},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${StorageFaultDomainsToUse},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('FaultDomainRedundancy')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AutoNumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfGroups},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint64],     ${Interleave},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ciminstance[]],     ${StorageTiers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64[]],     ${StorageTierSizes},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${WriteCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AutoWriteCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${ReadCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${IsManualAttach},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${AddToCluster},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6897105,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,             [object]$__cmdletization_value = ${ProvisioningType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,             [object]$__cmdletization_value = ${AllocationUnitSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MediaType')) {,             [object]$__cmdletization_value = ${MediaType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('IsEnclosureAware')) {,             [object]$__cmdletization_value = ${IsEnclosureAware},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsEnclosureAware'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsEnclosureAware'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,             [object]$__cmdletization_value = ${FaultDomainAwareness},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,             [object]$__cmdletization_value = ${ColumnIsolation},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDisksToUse')) {,             [object]$__cmdletization_value = ${PhysicalDisksToUse},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisksToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisksToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageFaultDomainsToUse')) {,             [object]$__cmdletization_value = ${StorageFaultDomainsToUse},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageFaultDomainsToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageFaultDomainsToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,             [object]$__cmdletization_value = ${PhysicalDiskRedundancy},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,             [object]$__cmdletization_value = ${NumberOfDataCopies},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,        ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6897601,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: rameter]@{Name = 'WriteCacheSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,             [object]$__cmdletization_value = ${AutoWriteCacheSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ReadCacheSize')) {,             [object]$__cmdletization_value = ${ReadCacheSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReadCacheSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReadCacheSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,             [object]$__cmdletization_value = ${IsManualAttach},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AddToCluster')) {,             [object]$__cmdletization_value = ${AddToCluster},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddToCluster'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddToCluster'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedVirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StoragePool.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-VirtualDisk' -Alias '*',         , function New-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StoragePoolId')],     [ValidateNotNull()],     [string[]],     ${StoragePoolUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StoragePoolFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StoragePoolName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [Alias('StorageTierFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${AllocationUnitSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType],     ${MediaType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType],     ${ColumnIsolation},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain')],     [ValidateNotNull()],     [ValidateNo...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6897974,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ame = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,             [object]$__cmdletization_value = ${ProvisioningType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,             [object]$__cmdletization_value = ${AllocationUnitSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MediaType')) {,             [object]$__cmdletization_value = ${MediaType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,             [object]$__cmdletization_value = ${FaultDomainAwareness},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,             [object]$__cmdletization_value = ${ColumnIsolation},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageFaultDomainsToUse')) {,             [object]$__cmdletization_value = ${StorageFaultDomainsToUse},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageFaultDomainsToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageFaultDomainsToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,             [object]$__cmdletization_value = ${ResiliencySettingName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Usage')) {,             [object]$__cmdletization_value = ${Usage},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.CreateStorageTier.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.CreateStorageTier.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,             [object]$__cmdletization_value = ${PhysicalDiskRedundancy},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,             [object]$__cmdletization_value = ${NumberOfDataCopies},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValu...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6898454,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ucture.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StoragePool')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DeleteObject', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StoragePool.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-StoragePool' -Alias '*',         , function Update-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StoragePool')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenTh...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.6898798,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: n_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('true', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:FromPowerShell'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Optimize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StoragePool.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Optimize-StoragePool' -Alias '*',         , function Get-VirtualDiskSupportedSize, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StoragePoolId','UniqueId')],     [ValidateNotNull()],     [string[]],     ${StoragePoolUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${StoragePoolFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StoragePoolName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)],     [Alias('Name')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StoragePoolUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,             [object]$__cmdletization_value = ${ResiliencySettingName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7122981,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageProvider, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uri[]],     ${URI},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Manufacturer') -and (@('ByURI', 'ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Manufacturer}),         $__cmdletization_queryBuilder.FilterByProperty('Manufacturer', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('URI') -and (@('ByURI') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${URI}),         $__cmdletization_queryBuilder.FilterByProperty('URI', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageProviderToStorageSubSystem', 'StorageSubSystem', 'StorageProvider', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageProvider' -Alias '*',         , function Update-StorageProviderCache, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uri[]],     ${URI},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.DiscoveryLevel],     ${DiscoveryLevel},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ref],     ${RootObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetN...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7123510,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: imInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [Alias('CN')],     [string],     ${ComputerName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [pscredential],     [System.Management.Automation.CredentialAttribute()],     ${Credential},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ProviderUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ProviderName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'ReportErrors'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ComputerName')) {,             [object]$__cmdletization_value = ${ComputerName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ComputerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ComputerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Credential')) {,             [object]$__cmdletization_value = ${Credential},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Credential'; ParameterType = 'System.Management.Automation.PSCredential'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Credential'; ParameterType = 'System.Management.Automation.PSCredential'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegisteredSubsystem'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RegisterSubsystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Register-StorageSubsystem' -Alias '*',         , function Unregister-StorageSubsystem, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('ProviderId')],     [ValidateNotNull()],     [string[]],     ${ProviderUniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${ProviderName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)],     [Alias('UniqueId')],     [string],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Force},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7123741,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: xml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ProviderUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ProviderName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'ReportErrors'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RemoteSubsystemCacheMode')) {,             [object]$__cmdletization_value = ${RemoteSubsystemCacheMode},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteSubsystemCacheMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.RemoteSubsystemCacheMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteSubsystemCacheMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.RemoteSubsystemCacheMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetAttributes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageProvider' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7282839,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageReliabilityCounter', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageReliabilityCounterDeprecated, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageReliabilityCounter')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageReliabilityCounter.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageReliabilityCounterDeprecated' -Alias '*',         , function Reset-StorageReliabilityCounter, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageReliabilityCounter')],     param(,     ,     [Parameter(ParameterSetName='ByPhysicalDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('PhysicalDisk') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${PhysicalDisk}, 'MSFT_PhysicalDiskToStorageReliabilityCounter', 'PhysicalDisk', 'StorageReliabilityCounter', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_DiskToStorageReliabilityCounter', 'Disk', 'StorageReliabilityCounter', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByPhysicalDisk', 'ByDisk', 'InputObject (cdxml)') -contains $_ } {,       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Reset', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageReliabilityCounter.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Reset-StorageReliabilityCounter' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7443894,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageSetting', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageSetting, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='Get0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Get0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Get0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageSetting'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageSetting' -Alias '*',         , function Set-StorageSetting, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Set1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.NewDiskPolicy],     ${NewDiskPolicy},,     [Parameter(ParameterSetName='Set1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.ScrubPolicy],     ${ScrubPolicy},,     [Parameter(ParameterSetName='Set1')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Set1')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Set1')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDiskPolicy')) {,           [object]$__cmdletization_value = ${NewDiskPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDiskPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.NewDiskPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDiskPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.NewDiskPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScrubPolicy')) {,           [object]$__cmdletization_value = ${ScrubPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScrubPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.ScrubPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScrubPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.ScrubPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageSetting' -Alias '*',         , function Update-HostSto...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7942106,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageSubSystem, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [ValidateNotNull()],     [string[]],     ${Model},,     [Parameter(ParameterSetName='ByStorageProvider', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance],     ${StorageProvider},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ${TargetPort},,     [Parameter(ParameterSetName='ByTargetPortal', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPortal')],     [ValidateNotNull()],     [ciminstance],     ${TargetPortal},,     [Parameter(ParameterSetName='ByInitiatorId', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorId},,     [Parameter(ParameterSetName='ByOffloadDataTransferSetting', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_OffloadDataTransferSetting')],     [ValidateNotNull()],     [ciminstance],     ${OffloadDataTransferSetting},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByFileServer', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='ByStorageFaultDomain', ValueFromPipeline=$true)],     [Alias('PhysicalDisk','StorageEnclosure','StorageScaleUnit','StorageChassis','StorageRack','StorageSite')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain')],     [ValidateNotNull()],     [ciminstance],     ${StorageFaultDomain},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')], ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7942517,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageSubSystemToStorageNode', 'StorageNode', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StorageSubSystemToStoragePool', 'StoragePool', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_StorageSubSystemToVirtualDisk', 'VirtualDisk', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_StorageSubSystemToMaskingSet', 'MaskingSet', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_StorageSubSystemToTargetPort', 'TargetPort', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPortal') -and (@('ByTargetPortal') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPortal}, 'MSFT_StorageSubSystemToTargetPortal', 'TargetPortal', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorId') -and (@('ByInitiatorId') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorId}, 'MSFT_StorageSubSystemToInitiatorId', 'InitiatorId', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('OffloadDataTransferSetting') -and (@('ByOffloadDataTransferSetting') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${OffloadDataTransferSetting}, 'MSFT_StorageSubSystemToOffloadDataTransferSetting', 'OffloadDataTransferSetting', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_StorageSubSystemToDisk', 'Disk', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_StorageSubSystemToPartition', 'Partition', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_StorageSubSystemToVolume', 'Volume', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByFileServer') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_StorageSubSystemToFileServer', 'FileServer', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageFaultDomain') -and (@('ByStorageFaultDomain') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageFaultDomain}, 'MSFT_StorageSubSystemToStorageFaultDomain', 'StorageFaultDomain', 'StorageSubSystem', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageSubSystem' -Alias '*',         , function New-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [Alias('StoragePoolFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('StoragePoolUsage')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('StoragePoolOtherUsageDescription')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisks},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType],     ${ProvisioningTypeDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.MediaType],     ${MediaTypeDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${EnclosureAwareDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType],     ${FaultDomainAwarenessDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingNameDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${LogicalSectorSizeDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${WriteCacheSizeDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${AutoWriteCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Version],     ${Version},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Param...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7942958,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,             [object]$__cmdletization_value = ${PhysicalDisks},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,             [object]$__cmdletization_value = ${ProvisioningTypeDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,             [object]$__cmdletization_value = ${MediaTypeDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,             [object]$__cmdletization_value = ${EnclosureAwareDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,             [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ResiliencySettingNameDefault')) {,             [object]$__cmdletization_value = ${ResiliencySettingNameDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('LogicalSectorSizeDefault')) {,             [object]$__cmdletization_value = ${LogicalSectorSizeDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogicalSectorSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogicalSectorSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,             [object]$__cmdletization_value = ${WriteCacheSizeDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,             [object]$__cmdletization_value = ${AutoWriteCacheSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Version')) {,             [object]$__cmdletization_value = ${Version},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Version'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Version'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Version'; ParameterType = 'Microsoft.Po...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7943359,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ame='InputObject (cdxml)')],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('FaultDomainRedundancy')],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.ParityLayout],     ${ParityLayout},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${RequestNoSinglePointOfFailure},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${IsEnclosureAware},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Usage')) {,             [object]$__cmdletization_value = ${Usage},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,             [object]$__cmdletization_value = ${OtherUsageDescription},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('UseMaximumSize')) {,             [object]$__cmdletization_value = ${UseMaximumSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdlet...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7943815,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,             [object]$__cmdletization_value = ${ProvisioningType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('IsEnclosureAware')) {,             [object]$__cmdletization_value = ${IsEnclosureAware},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsEnclosureAware'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsEnclosureAware'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,             [object]$__cmdletization_value = ${FaultDomainAwareness},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedVirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-StorageSubsystemVirtualDisk' -Alias '*',         , function New-MaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('MaskingSetFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${VirtualDiskNames},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${InitiatorAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${DeviceNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.DeviceAccess[]],     ${DeviceAccesses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.HostMode],     ${HostType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7944166,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DeviceNumbers')) {,             [object]$__cmdletization_value = ${DeviceNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceNumbers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceNumbers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DeviceAccesses')) {,             [object]$__cmdletization_value = ${DeviceAccesses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('HostType')) {,             [object]$__cmdletization_value = ${HostType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.HostMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.HostMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedMaskingSet'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateMaskingSet', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-MaskingSet' -Alias '*',         , function New-StorageFileServer, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubSystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${HostNames},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateFileServer.FileSharingProtocol[]],     ${Protocols},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7944649,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ueryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-StorageFileServer' -Alias '*',         , function Get-StorageDiagnosticInfoInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNullOrEmpty()],     [string],     ${DestinationPath},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint32],     ${TimeSpan},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${ActivityId},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${ExcludeOperationalLog},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${ExcludeDiagnosticLog},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${IncludeLiveDump},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DestinationPath')) {,             [object]$__cmdletization_value = ${DestinationPath},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TimeSpan')) {,             [object]$__cmdletization_value = ${TimeSpan},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TimeSpan'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TimeSpan'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ActivityId')) {,             [object]$__cmdletization_value = ${ActivityId},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ActivityId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ActivityId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ExcludeOperationalLog')) {,             [object]$__cmdletization_value = ${ExcludeOperationalLog},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeOperationalLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeOperationalLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ExcludeDiagnosticLog')) {,             [object]$__cmdletization_value = ${ExcludeDiagnosticLog},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeDiagnosticLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeDiagnosticLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('IncludeLiveDump')) {,             [object]$__cmdletization_value = ${IncludeLiveDump},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IncludeLiveDump'; Parameter...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7945035,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: mmonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('ClearDiagnosticInfo', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Clear-StorageDiagnosticInfo' -Alias '*',         , function Start-StorageDiagnosticLog, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     [Alias('Enable-StorageDiagnosticLog')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.EnableDiagnosticLog.Level],     ${Level},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${MaxLogSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Informational', 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.EnableDiagnosticLog.Level'),           [object]$__cmdletization_defaultValueIsPresent = $true,           if ($PSBoundParameters.ContainsKey('Level')) {,             [object]$__cmdletization_value = ${Level},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Level'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.EnableDiagnosticLog.Level'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParam...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.7945364,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: per::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('StopDiagnosticLog', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Stop-StorageDiagnosticLog' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8163894,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageTier', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageTier')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageTier.MediaType[]],     ${MediaType},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MediaType') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStoragePool', 'ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MediaType}),         $__cmdletization_queryBuilder.FilterByProperty('MediaType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToStorageTier', 'StoragePool', 'StorageTier', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToStorageTier', 'VirtualDisk', 'StorageTier', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageTier' -Alias '*',         , function Remove-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageTier')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8164392,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: nfo]::new('Resize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Resize-StorageTier' -Alias '*',         , function Get-StorageTierSupportedSize, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)],     [Alias('Name')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,             [object]$__cmdletization_value = ${ResiliencySettingName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SupportedSizes'; ParameterType = 'System.UInt64[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierSizeMin'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierSizeMax'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierSizeDivisor'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedSize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EX...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8351501,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_TargetPort', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-TargetPort, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_TargetPort')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByAddress', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${PortAddress},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByAddress', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.TargetPort.ConnectionType[]],     ${ConnectionType},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByTargetPortal', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPortal')],     [ValidateNotNull()],     [ciminstance],     ${TargetPortal},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PortAddress') -and (@('ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PortAddress}),         $__cmdletization_queryBuilder.FilterByProperty('PortAddress', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ConnectionType') -and (@('ByName', 'ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ConnectionType}),         $__cmdletization_queryBuilder.FilterByProperty('ConnectionType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToTargetPort', 'StorageSubSystem', 'TargetPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_MaskingSetToTargetPort', 'MaskingSet', 'TargetPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPortal') -and (@('ByTargetPortal') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPortal}, 'MSFT_TargetPortToTargetPortal', 'TargetPortal', 'TargetPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_TargetPortToVirtualDisk', 'VirtualDisk', 'TargetPort', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP TargetPort.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-TargetPort' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8490313,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_TargetPortal', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-TargetPortal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_TargetPortal')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByIPv4Address', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${IPv4Address},,     [Parameter(ParameterSetName='ByIPv6Address', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${IPv6Address},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ${TargetPort},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubsystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByIPv4Address')],     [Parameter(ParameterSetName='ByIPv6Address')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySubsystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByIPv4Address')],     [Parameter(ParameterSetName='ByIPv6Address')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySubsystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByIPv4Address')],     [Parameter(ParameterSetName='ByIPv6Address')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySubsystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('IPv4Address') -and (@('ByIPv4Address') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${IPv4Address}),         $__cmdletization_queryBuilder.FilterByProperty('IPv4Address', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('IPv6Address') -and (@('ByIPv6Address') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${IPv6Address}),         $__cmdletization_queryBuilder.FilterByProperty('IPv6Address', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_TargetPortToTargetPortal', 'TargetPort', 'TargetPortal', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubsystem}, 'MSFT_StorageSubSystemToTargetPortal', 'StorageSubSystem', 'TargetPortal', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP TargetPortal.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-TargetPortal' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8974256,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.Usage[]],     ${Usage},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [string[]],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [bool[]],     ${IsSnapshot},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByStorageEnclosure', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance],     ${StorageEnclosure},,     [Parameter(ParameterSetName='ByStorageScaleUnit', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageScaleUnit')],     [ValidateNotNull()],     [ciminstance],     ${StorageScaleUnit},,     [Parameter(ParameterSetName='ByStorageChassis', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageChassis')],     [ValidateNotNull()],     [ciminstance],     ${StorageChassis},,     [Parameter(ParameterSetName='ByStorageRack', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageRack')],     [ValidateNotNull()],     [ciminstance],     ${StorageRack},,     [Parameter(ParameterSetName='ByStorageTier', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance],     ${StorageTier},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByInitiatorPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorPort')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorPort},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByInitiatorId', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorId},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8974527,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: alDisk')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${TargetVirtualDisk},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [uint64],     ${PhysicalRangeMin},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [uint64],     ${PhysicalRangeMax},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [switch],     ${NoRedundancy},,     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [switch],     ${AssociatedObjects},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Usage') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Usage}),         $__cmdletization_queryBuilder.FilterByProperty('Usage', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('OtherUsageDescription') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${OtherUsageDescription}),         $__cmdletization_queryBuilder.FilterByProperty('OtherUsageDescription', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('IsSnapshot') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${IsSnapshot}),         $__cmdletization_queryBuilder.FilterByProperty('IsSnapshot', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HealthStatus') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HealthStatus}),         $__cmdletization_queryBuilder.FilterByProperty('HealthStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToVirtualDisk', 'StorageSubSystem', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageNode') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageNodeToVirtualDisk', 'StorageNode', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToVirtualDisk', 'StoragePool', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicalDisk') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryB...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8974762,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: skToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageScaleUnit') -and (@('ByStorageScaleUnit') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageScaleUnit}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageChassis') -and (@('ByStorageChassis') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageChassis}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageRack') -and (@('ByStorageRack') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageRack}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageTier') -and (@('ByStorageTier') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageTier}, 'MSFT_VirtualDiskToStorageTier', 'StorageTier', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_VirtualDiskToDisk', 'Disk', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorPort') -and (@('ByInitiatorPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorPort}, 'MSFT_VirtualDiskToInitiatorPort', 'InitiatorPort', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_MaskingSetToVirtualDisk', 'MaskingSet', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorId') -and (@('ByInitiatorId') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorId}, 'MSFT_InitiatorIdToVirtualDisk', 'InitiatorId', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_TargetPortToVirtualDisk', 'TargetPort', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('SourceVirtualDisk') -and (@('BySourceVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${SourceVirtualDisk}, 'MSFT_VirtualDiskToVirtualDisk', 'SourceVirtualDisk', 'TargetVirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetVirtualDisk') -and (@('ByTargetVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetVirtualDisk}, 'MSFT_VirtualDiskToVirtualDisk', 'TargetVirtualDisk', 'SourceVirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageJob') -and (@('ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageJob}, 'MSFT_StorageJobToAffectedStorageObject', 'StorageJob', 'AffectedStorageObject', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicalRangeMin') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('PhysicalRangeMin', ${PhysicalRangeMin}),     },     if ($PSBoundParameters.ContainsKey('PhysicalRangeMax') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('PhysicalRangeMax', ${PhysicalRangeMax}),     },     if ($PSBoundParameters.ContainsKey('NoRedundancy') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('NoRedundancy', ${NoRedundancy}),     },     if ($PSBoundParameters.ContainsKey('AssociatedObjects') -and (@('BySourceVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('AssociatedObjects', ${AssociatedObjects}),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-VirtualDisk' -Alias '*',         , function Remove-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8981835,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Parameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DeleteObject', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-VirtualDisk' -Alias '*',         , function Show-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${InitiatorAddress},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.Expose.HostType],     ${HostType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetPortAddresses')) {,             [object]$__cmdletization_value = ${TargetPortAddresses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorAddress')) {,             [object]$__cmdletization_value = ${InitiatorAddress},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('HostType')) {,             [object]$__cmdletization_value = ${HostType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.Expose.HostType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.Expose.HostType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletiz...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8982222,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Show', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Show-VirtualDisk' -Alias '*',         , function Hide-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${InitiatorAddress},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetPortAddresses')) {,             [object]$__cmdletization_value = ${TargetPortAddresses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorAddress')) {,             [object]$__cmdletization_value = ${InitiatorAddress},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Hide', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8982638,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:   $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Hide-VirtualDisk' -Alias '*',         , function New-VirtualDiskSnapshot, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('VirtualDiskId')],     [ValidateNotNull()],     [string[]],     ${VirtualDiskUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${TargetStoragePoolName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('VirtualDiskUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDiskName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetStoragePoolName')) {,             [object]$__cmdletization_value = ${TargetStoragePoolName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetStoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetStoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedVirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateSnapshot', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-VirtualDiskSnapshot' -Alias '*',         , function New-VirtualDiskClone, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Inf...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8983197,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: eByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${TargetStoragePoolName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('VirtualDiskUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDiskName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetStoragePoolName')) {,             [object]$__cmdletization_value = ${TargetStoragePoolName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetStoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetStoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedVirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateClone', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-VirtualDiskClone' -Alias '*',         , function Resize-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8983723,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: lyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Resize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Resize-VirtualDisk' -Alias '*',         , function Repair-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId'...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8984119,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Repair', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Repair-VirtualDisk' -Alias '*',         , function Connect-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${StorageNodeName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,             [object]$__cmdletization_value = ${StorageNodeName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Attach', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.8984472,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Connect-VirtualDisk' -Alias '*',         , function Disconnect-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${StorageNodeName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,             [object]$__cmdletization_value = ${StorageNodeName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Detach', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disconnect-VirtualDisk' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9528748,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_Volume', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByPaths', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='ByDiskImage', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     [ValidateNotNull()],     [ciminstance],     ${DiskImage},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStorageFileServer', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${StorageFileServer},,     [Parameter(ParameterSetName='ByFileShare', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance],     ${FileShare},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByFilePath', ValueFromPipelineByPropertyName=$true)],     [Alias('FullName')],     [ValidateNotNullOrEmpty()],     [string],     ${FilePath},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByDiskImage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageFileServer')],     [Parameter(ParameterSetName='ByFileShare')],     [Parameter(ParameterSetName='ByStorageJob')],     [Parameter(ParameterSetName='ByFilePath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByDiskImage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageFileServer')],     [Parameter(ParameterSetName='ByFileShare')],     [Parameter(ParameterSetName='ByStorageJob')],     [Parameter(ParameterSetName='ByFilePath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByDiskImage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageFileServer')],     [Parameter(ParameterSetName='ByFileShare')],     [Parameter(ParameterSetName='ByStorageJob')],     [Parameter(ParameterSetName='ByFilePath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_PartitionToVolume', 'Partition', 'Volume', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('DiskImage') -and (@...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9529018,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: letization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToVolume', 'StoragePool', 'Volume', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageNode') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageNodeToVolume', 'StorageNode', 'Volume', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageFileServer') -and (@('ByStorageFileServer') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageFileServer}, 'MSFT_FileServerToVolume', 'FileServer', 'Volume', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('FileShare') -and (@('ByFileShare') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileShare}, 'MSFT_VolumeToFileShare', 'FileShare', 'Volume', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageJob') -and (@('ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageJob}, 'MSFT_StorageJobToAffectedStorageObject', 'StorageJob', 'AffectedStorageObject', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('FilePath') -and (@('ByFilePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('FilePath', ${FilePath}),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-Volume' -Alias '*',         , function Format-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     [Alias('Initialize-Volume')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('FAT','FAT32','exFAT','NTFS','ReFS')],     [string],     ${FileSystem},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('NewFriendlyName')],     [string],     ${NewFileSystemLabel},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('ClusterSize')],     [uint32],     ${AllocationUnitSize},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Full},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Force},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Compress},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${ShortFileNameSupport},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${SetIntegrityStreams},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${UseLargeFRS},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${DisableHeatGathering},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${IsDAX},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9529544,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_PartitionToVolume', 'Partition', 'Volume', 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'ByPartition', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FileSystem')) {,             [object]$__cmdletization_value = ${FileSystem},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystem'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystem'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,             [object]$__cmdletization_value = ${NewFileSystemLabel},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,             [object]$__cmdletization_value = ${AllocationUnitSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Full')) {,             [object]$__cmdletization_value = ${Full},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Full'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Full'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Force')) {,             [object]$__cmdletization_value = ${Force},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Compress')) {,             [object]$__cmdletization_value = ${Compress},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Compress'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Compress'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ShortFileNameSupport')) {,             [object]$__cmdletization_value = ${ShortFileNameSupport},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ShortFileNameSupport'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ShortFileNameSupport'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SetIntegrityStreams')) {,             [object]$__cmdletization_value = ${SetIntegrityStreams},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SetIntegrityStreams'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SetIntegrityStreams'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('UseLargeFRS')) {,             [object]$__cmdletization_value = ${UseLargeFRS},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseLargeFRS'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseLargeFRS'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DisableHeatGathering')) {,             [object]$__cmdletization_value = ${DisableHeatGathering},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHeatGathering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHeatGathering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings =...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9529933,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:       $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FormattedVolume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Format', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Format-Volume' -Alias '*',         , function Repair-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.PowerShell.Cmdletization.GeneratedTypes.Volume.RepairStatus])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${OfflineScanAndFix},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${SpotFix},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Scan},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('OfflineScanAndFix')) {,             [object]$__cmdletization_value = ${OfflineScanAndFix},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OfflineScanAndFix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OfflineScanAndFix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SpotFix')) {,             [object]$__cmdletization_value = ${SpotFix},             $__cmdletiza...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9530194,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: t]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Scan')) {,             [object]$__cmdletization_value = ${Scan},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Scan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Scan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Volume.RepairStatus'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Repair', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Repair-Volume' -Alias '*',         , function Optimize-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([System.UInt32])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${ReTrim},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Analyze},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Defrag},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${SlabConsolidate},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${TierOptimize},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${NormalPriority},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletizat...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9531013,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Analyze')) {,             [object]$__cmdletization_value = ${Analyze},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Analyze'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Analyze'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Defrag')) {,             [object]$__cmdletization_value = ${Defrag},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Defrag'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Defrag'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlabConsolidate')) {,             [object]$__cmdletization_value = ${SlabConsolidate},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlabConsolidate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlabConsolidate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TierOptimize')) {,             [object]$__cmdletization_value = ${TierOptimize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierOptimize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierOptimize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NormalPriority')) {,             [object]$__cmdletization_value = ${NormalPriority},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NormalPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NormalPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'System.UInt32'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Optimize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Optimize-Volume' -Alias '*',         , function Get-SupportedFileSystems, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([System.String[]])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },         ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9531379,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:     {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SupportedFileSystems'; ParameterType = 'System.String[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedFileSystems', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-SupportedFileSystems' -Alias '*',         , function Get-SupportedClusterSizes, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([System.UInt32[]])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Mandatory=$true)],     [Parameter(ParameterSetName='ByPaths', Mandatory=$true)],     [Parameter(ParameterSetName='ByLabel', Mandatory=$true)],     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FileSystem},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SupportedClusterSizes'; ParameterType = 'System.UInt32[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FileSy...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9531621,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: _methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedClusterSizes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-SupportedClusterSizes' -Alias '*',         , function Get-VolumeCorruptionCount, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([System.UInt32])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CorruptionCount'; ParameterType = 'System.UInt32'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetCorruptionCount', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-VolumeCorruptionCount' -Alias '*',         , function Get-VolumeScrubPolicy, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([System.Boolean])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]], ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9532730,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeScrubEnabled'; ParameterType = 'System.Boolean'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetAttributes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-VolumeScrubPolicy' -Alias '*',         , function Set-VolumeScrubPolicy, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Position=1)],     [Parameter(ParameterSetName='ByPaths', Position=1)],     [Parameter(ParameterSetName='ByLabel', Position=1)],     [Parameter(ParameterSetName='ByDriveLetter', Position=1)],     [Parameter(ParameterSetName='InputObject (cdxml)', Position=1)],     [bool],     ${Enable},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },        ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9533192,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Enable')) {,             [object]$__cmdletization_value = ${Enable},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableVolumeScrub'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableVolumeScrub'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetAttributes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-VolumeScrubPolicy' -Alias '*',         , function Write-VolumeCache, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     [Alias('Write-FileSystemCache','Flush-Volume')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Flush', $...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:28:59.9533463,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Write-VolumeCache' -Alias '*',         , function Get-DedupProperties, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupProperties'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetDedupProperties', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-DedupProperties' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.1056719,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_Disk', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId')],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${SerialNumber},,     [Parameter(ParameterSetName='ByPath', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByNumber', Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('DeviceId')],     [ValidateNotNull()],     [uint32[]],     ${Number},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByiSCSISession', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSISession')],     [ValidateNotNull()],     [ciminstance],     ${iSCSISession},,     [Parameter(ParameterSetName='ByiSCSIConnection', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSIConnection')],     [ValidateNotNull()],     [ciminstance],     ${iSCSIConnection},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageJob')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageJob')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageJob')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('SerialNumber') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${SerialNumber}),         $__cmdletization_queryBuilder.FilterByProperty('SerialNumber', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_DiskToPartition', 'Partition', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToDisk', 'VirtualDisk', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSISession') -and (@('ByiSCSISession') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSISession}, 'MSFT_iSCSISessionToDisk', 'iSCSISession', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSIConnection') -and (@('ByiSCSIConnection') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSIConnection}, 'MSFT_iSCSIConnectionToDisk', 'iSCSIConnection', 'Disk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInst...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.1057112,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: $PSBoundParameters.ContainsKey('PartitionStyle')) {,             [object]$__cmdletization_value = ${PartitionStyle},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Initialize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Initialize-Disk' -Alias '*',         , function Clear-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumber', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${Number},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${RemoveData},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${RemoveOEM},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Sanitize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'ByPath', 'ByNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RemoveData')) {,             [object]$__cmdletization_value = ${RemoveData},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveData'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveData'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.1057403,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskPath') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskPath}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByPath', 'ByNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('UseMaximumSize')) {,             [object]$__cmdletization_value = ${UseMaximumSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Offset')) {,             [object]$__cmdletization_value = ${Offset},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Offset'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Alignment')) {,             [object]$__cmdletization_value = ${Alignment},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Alignment'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Alignment'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DriveLetter')) {,             [object]$__cmdletization_value = ${DriveLetter},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AssignDriveLetter')) {,             [object]$__cmdletization_value = ${AssignDriveLetter},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MbrType')) {,             [object]$__cmdletization_value = ${MbrType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.CreatePartition.MbrType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Disk.CreatePartition.MbrType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('GptType')) {,             [object]$__cmdletization_value = ${GptType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParam...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.1057667,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ation_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Number') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Number}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'ByPath', 'ByNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Refresh', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Update-Disk' -Alias '*',         , function Enable-StorageHighAvailability, {,     [CmdletBinding(DefaultParameterSetName='ByDiskNumber', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Disk')],     param(,     ,     [Parameter(ParameterSetName='ByDiskUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('DiskId')],     [ValidateNotNull()],     [string[]],     ${DiskUniqueId},,     [Parameter(ParameterSetName='ByDiskName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskFriendlyName},,     [Parameter(ParameterSetName='ByDiskPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskPath},,     [Parameter(ParameterSetName='ByDiskNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${ScaleOut},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByDiskUniqueId')],     [Parameter(ParameterSetName='ByDiskName')],     [Parameter(ParameterSetName='ByDiskPath')],     [Parameter(ParameterSetName='ByDiskNumber')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskUniqueId') -and (@('ByDiskUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskFriendlyName') -and (@('ByDiskName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskPath') -and (@('ByDiskPath') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskPath}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByDiskNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('Number', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByDiskUniqueId', 'ByDiskName', 'ByDiskPath', 'ByDiskNumber', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ScaleOut')) {,             [object]$__cmdletization_value = ${ScaleOut},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScaleOut'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScaleOut'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultV...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.1057754,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ype = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DisableHighAvailability', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Disk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disable-StorageHighAvailability' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.2092450,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_DiskImage', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-DiskImage, {,     [CmdletBinding(DefaultParameterSetName='ByImagePath', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_DiskImage')],     param(,     ,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByImagePath', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${ImagePath},,     [Parameter(ParameterSetName='ByDevicePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${DevicePath},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByImagePath', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDevicePath', ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.StorageType],     ${StorageType},,     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_DiskImageToVolume', 'Volume', 'DiskImage', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('ImagePath') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('ImagePath', ${ImagePath}),     },     if ($PSBoundParameters.ContainsKey('DevicePath') -and (@('ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('DevicePath', ${DevicePath}),     },     if ($PSBoundParameters.ContainsKey('StorageType') -and (@('ByVolume', 'ByImagePath', 'ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('VirtualStorageTypeDeviceId', ${StorageType}),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP DiskImage.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-DiskImage' -Alias '*',         , function Mount-DiskImage, {,     [CmdletBinding(DefaultParameterSetName='ByImagePath', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     param(,     ,     [Parameter(ParameterSetName='ByImagePath', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${ImagePath},,     [Parameter(ParameterSetName='ByImagePath', ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.StorageType],     ${StorageType},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.Access],     ${Access},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${NoDriveLetter},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ImagePath') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('ImagePath', ${ImagePath}),     },     if ($PSBoundParameters.ContainsKey('StorageType') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOp...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.2092644,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: kImage',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Mount', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP DiskImage.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Mount-DiskImage' -Alias '*',         , function Dismount-DiskImage, {,     [CmdletBinding(DefaultParameterSetName='ByImagePath', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     param(,     ,     [Parameter(ParameterSetName='ByImagePath', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${ImagePath},,     [Parameter(ParameterSetName='ByDevicePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string[]],     ${DevicePath},,     [Parameter(ParameterSetName='ByImagePath', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDevicePath', ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.DiskImage.StorageType],     ${StorageType},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByImagePath')],     [Parameter(ParameterSetName='ByDevicePath')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ImagePath') -and (@('ByImagePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('ImagePath', ${ImagePath}),     },     if ($PSBoundParameters.ContainsKey('DevicePath') -and (@('ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('DevicePath', ${DevicePath}),     },     if ($PSBoundParameters.ContainsKey('StorageType') -and (@('ByImagePath', 'ByDevicePath') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('VirtualStorageTypeDeviceId', ${StorageType}),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByImagePath', 'ByDevicePath', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskImage'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Dismount', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP DiskImage.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Dismount-DiskImage' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.2434946,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileIntegrity', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-FileIntegrity, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileIntegrity')],     param(,     ,     [Parameter(ParameterSetName='Get0', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('FullName')],     [string],     ${FileName},,     [Parameter(ParameterSetName='Get0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Get0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Get0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileName')) {,           [object]$__cmdletization_value = ${FileName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileIntegrity'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_FileIntegrity',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileIntegrity.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-FileIntegrity' -Alias '*',         , function Set-FileIntegrity, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Set1', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('FullName')],     [string],     ${FileName},,     [Parameter(ParameterSetName='Set1', Position=1)],     [bool],     ${Enable},,     [Parameter(ParameterSetName='Set1')],     [bool],     ${Enforce},,     [Parameter(ParameterSetName='Set1')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Set1')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Set1')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileName')) {,           [object]$__cmdletization_value = ${FileName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Enable')) {,           [object]$__cmdletization_value = ${Enable},           $__cmdletization_methodParameter = [Microsoft.PowerShell....[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.2691644,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileServer', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , $script:PrivateData.Add('ClientSideShouldProcess', ''), function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageFileServer, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileServer')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${Subsystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='BySubsystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='BySubsystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='BySubsystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Subsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Subsystem}, 'MSFT_StorageSubsystemToFileServer', 'StorageSubsystem', 'FileServer', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileServer.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageFileServer' -Alias '*',         , function Remove-StorageFileServer, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileServer')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.2692238,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,             [object]$__cmdletization_value = ${NewFriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFriendlyName', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileServer.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageFileServer' -Alias '*',         , function New-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${FileServerUniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${FileServerFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Description},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${SourceVolume},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${RelativePathName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${ContinuouslyAvailable},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${EncryptData},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileServer.FileSharingProtocol],     ${Protocol},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,            ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.2692362,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:       } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SourceVolume')) {,             [object]$__cmdletization_value = ${SourceVolume},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceVolume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceVolume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RelativePathName')) {,             [object]$__cmdletization_value = ${RelativePathName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeRelativePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeRelativePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ContinuouslyAvailable')) {,             [object]$__cmdletization_value = ${ContinuouslyAvailable},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ContinuouslyAvailable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ContinuouslyAvailable'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('EncryptData')) {,             [object]$__cmdletization_value = ${EncryptData},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Protocol')) {,             [object]$__cmdletization_value = ${Protocol},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSharingProtocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileServer.FileSharingProtocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSharingProtocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileServer.FileSharingProtocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedFileShare'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateFileShare', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileServer.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-FileShare' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3151234,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileShare', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , $script:PrivateData.Add('ClientSideShouldProcess', ''), function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByFileServer', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileShare.FileSharingProtocol[]],     ${Protocol},,     [Parameter(ParameterSetName='ByFileServer', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${Subsystem},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='BySubsystem')],     [Parameter(ParameterSetName='ByVolume')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByFileServer', 'BySubsystem', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByFileServer', 'BySubsystem', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Protocol}),         $__cmdletization_queryBuilder.FilterByProperty('FileSharingProtocol', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByFileServer') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Subsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Subsystem}, 'MSFT_StorageSubsystemToFileShare', 'StorageSubsystem', 'FileShare', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_VolumeToFileShare', 'Volume', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-FileShare' -Alias '*',         , function Remove-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVer...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3152121,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Parameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccountName')) {,             [object]$__cmdletization_value = ${AccountName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccessRight')) {,             [object]$__cmdletization_value = ${AccessRight},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessRight'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileShare.AccessRight'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessRight'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileShare.AccessRight'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GrantAccess', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Grant-FileShareAccess' -Alias '*',         , function Block-FileShareAccess, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${AccountName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccountName')) {,             [object]$__cmdletization_value = ${AccountName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParame...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3152628,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: dletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RevokeAccess', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Revoke-FileShareAccess' -Alias '*',         , function Unblock-FileShareAccess, {,     [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_FileShare')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${AccountName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_FileServerToFileShare', 'FileServer', 'FileShare', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccountName')) {,             [object]$__cmdletization_value = ${AccountName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccountNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('UnblockAccess', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileShare.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Unblock-FileShareAccess' -Alias '*',         , function Get-FileShareAccessControlEntry, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShareAccessControlEntry[]')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Manag...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3503337,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_FileStorageTier', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-FileStorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByVolumeDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])],     param(,     ,     [Parameter(ParameterSetName='ByVolumeDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [char],     ${VolumeDriveLetter},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState],     ${PinnedState},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass],     ${PinnedStorageTierClass},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass],     ${AllocatedStorageTierClass},,     [Parameter(ParameterSetName='ByVolumePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${VolumePath},,     [Parameter(ParameterSetName='ByVolume', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByFilePath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${FilePath},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByVolumeDriveLetter')],     [Parameter(ParameterSetName='ByVolumePath')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFilePath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByVolumeDriveLetter') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VolumeDriveLetter')) {,           [object]$__cmdletization_value = ${VolumeDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedState')) {,           [object]$__cmdletization_value = ${PinnedState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedStorageTierClass')) {,           [object]$__cmdletization_value = ${PinnedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocatedStorageTierClass')) {,           [object]$__cmdletization_value = ${AllocatedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileStorageTier'; ParameterType = 'Microsoft...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3503673,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: on_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocatedStorageTierClass')) {,           [object]$__cmdletization_value = ${AllocatedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileStorageTier'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVolume') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Volume')) {,           [object]$__cmdletization_value = ${Volume},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Volume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Volume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedState')) {,           [object]$__cmdletization_value = ${PinnedState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedStorageTierClass')) {,           [object]$__cmdletization_value = ${PinnedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocatedStorageTierClass')) {,           [object]$__cmdletization_value = ${AllocatedStorageTierClass},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocatedStorageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileStorageTier'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFilePath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PinnedState')) {,           [object]$__cmdletization_value = ${PinnedState},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PinnedState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.PinnedState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValu...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3503858,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: werShell.Core/Export-ModuleMember -Function 'Get-FileStorageTier' -Alias '*',         , function Set-FileStorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByDesiredStorageTierFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByDesiredStorageTierUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDesiredStorageTierFriendlyName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDesiredStorageTier', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByDesiredStorageTierClass', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${FilePath},,     [Parameter(ParameterSetName='ByDesiredStorageTierUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${DesiredStorageTierUniqueId},,     [Parameter(ParameterSetName='ByDesiredStorageTierFriendlyName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${DesiredStorageTierFriendlyName},,     [Parameter(ParameterSetName='ByDesiredStorageTier', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ciminstance],     ${DesiredStorageTier},,     [Parameter(ParameterSetName='ByDesiredStorageTierClass', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass],     ${DesiredStorageTierClass},,     [Parameter(ParameterSetName='ByDesiredStorageTierUniqueId')],     [Parameter(ParameterSetName='ByDesiredStorageTierFriendlyName')],     [Parameter(ParameterSetName='ByDesiredStorageTier')],     [Parameter(ParameterSetName='ByDesiredStorageTierClass')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByDesiredStorageTierUniqueId')],     [Parameter(ParameterSetName='ByDesiredStorageTierFriendlyName')],     [Parameter(ParameterSetName='ByDesiredStorageTier')],     [Parameter(ParameterSetName='ByDesiredStorageTierClass')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByDesiredStorageTierUniqueId')],     [Parameter(ParameterSetName='ByDesiredStorageTierFriendlyName')],     [Parameter(ParameterSetName='ByDesiredStorageTier')],     [Parameter(ParameterSetName='ByDesiredStorageTierClass')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByDesiredStorageTierUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DesiredStorageTierUniqueId')) {,           [object]$__cmdletization_value = ${DesiredStorageTierUniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDesiredStorageTierFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DesiredStorageTierFriendlyName')) {,           [object]$__cmdletization_value = ${DesiredStorageTierFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DesiredStorageTierFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDesiredStorageTier') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'File...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3504030,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: torageTierClass'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.FileStorageTier.StorageTierClass'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileStorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-FileStorageTier' -Alias '*',         , function Clear-FileStorageTier, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Clear0', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${FilePath},,     [Parameter(ParameterSetName='Clear0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Clear0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Clear0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FilePath')) {,           [object]$__cmdletization_value = ${FilePath},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilePath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Clear', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP FileStorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Clear-FileStorageTier' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.3747064,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_InitiatorId', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-InitiatorId, {,     [CmdletBinding(DefaultParameterSetName='ByAddress', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorId')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByAddress', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${InitiatorAddress},,     [Parameter(ParameterSetName='ByAddress', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.InitiatorId.HostType[]],     ${HostType},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('InitiatorAddress') -and (@('ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${InitiatorAddress}),         $__cmdletization_queryBuilder.FilterByProperty('InitiatorAddress', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HostType') -and (@('ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HostType}),         $__cmdletization_queryBuilder.FilterByProperty('HostType', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_MaskingSetToInitiatorId', 'MaskingSet', 'InitiatorId', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_InitiatorIdToVirtualDisk', 'VirtualDisk', 'InitiatorId', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToInitiatorId', 'StorageSubSystem', 'InitiatorId', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP InitiatorId.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-InitiatorId' -Alias '*',         , function Remove-InitiatorId, {,     [CmdletBinding(DefaultParameterSetName='ByAddress', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorId')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByAddress', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${InitiatorAddress},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWr...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.4120060,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_InitiatorPort', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-InitiatorPort, {,     [CmdletBinding(DefaultParameterSetName='ByNodeAddress', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorPort')],     param(,     ,     [Parameter(ParameterSetName='ByObjectId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByNodeAddress', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${NodeAddress},,     [Parameter(ParameterSetName='ByInstanceName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${InstanceName},,     [Parameter(ParameterSetName='ByNodeAddress', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByInstanceName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.InitiatorPort.ConnectionType[]],     ${ConnectionType},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByiSCSISession', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSISession')],     [ValidateNotNull()],     [ciminstance],     ${iSCSISession},,     [Parameter(ParameterSetName='ByiSCSIConnection', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSIConnection')],     [ValidateNotNull()],     [ciminstance],     ${iSCSIConnection},,     [Parameter(ParameterSetName='ByiSCSITarget', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_iSCSITarget')],     [ValidateNotNull()],     [ciminstance],     ${iSCSITarget},,     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByNodeAddress')],     [Parameter(ParameterSetName='ByInstanceName')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByiSCSITarget')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByNodeAddress')],     [Parameter(ParameterSetName='ByInstanceName')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByiSCSITarget')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByNodeAddress')],     [Parameter(ParameterSetName='ByInstanceName')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByiSCSISession')],     [Parameter(ParameterSetName='ByiSCSIConnection')],     [Parameter(ParameterSetName='ByiSCSITarget')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ByObjectId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('NodeAddress') -and (@('ByNodeAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${NodeAddress}),         $__cmdletization_queryBuilder.FilterByProperty('NodeAddress', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('InstanceName') -and (@('ByInstanceName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${InstanceName}),         $__cmdletization_queryBuilder.FilterByProperty('InstanceName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ConnectionType') -and (@('ByNodeAddress', 'ByInstanceName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ConnectionType}),         $__cmdletization_queryBuilder.FilterByProperty('ConnectionType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToInitiatorPort', 'VirtualDisk', 'InitiatorPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSISession') -and (@('ByiSCSISession') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSISession}, 'MSFT_InitiatorPortToiSCSISession', 'iSCSISession', 'InitiatorPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSIConnection') -and (@('ByiSCSIConnection') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSIConnection}, 'MSFT_InitiatorPortToiSCSIConnection', 'iSCSIConnection', 'InitiatorPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('iSCSITarget') -and (@('ByiSCSITarget') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${iSCSITarget}, 'MSFT_InitiatorPortToiSCSITarget', 'iSCSITarget', 'InitiatorPort', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP InitiatorPort.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-InitiatorPort' -Alias '*',         , function Set-InitiatorPort, {,     [CmdletBinding(DefaultParameterSetName='ByNodeAddress', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_InitiatorPort')],     param(,     ,     [Parameter(ParameterSetName='ByObjectId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByNodeAddress', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [strin...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.4480147,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-MaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.HostType[]],     ${HostType},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ${TargetPort},,     [Parameter(ParameterSetName='ByInitiatorId', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorId},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HostType') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HostType}),         $__cmdletization_queryBuilder.FilterByProperty('HostType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_MaskingSetToTargetPort', 'TargetPort', 'MaskingSet', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorId') -and (@('ByInitiatorId') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorId}, 'MSFT_MaskingSetToInitiatorId', 'InitiatorId', 'MaskingSet', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToMaskingSet', 'StorageSubSystem', 'MaskingSet', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_MaskingSetToVirtualDisk', 'VirtualDisk', 'MaskingSet', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-MaskingSet' -Alias '*',         , function Remove-MaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.4480849,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: tion_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFriendlyName', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Rename-MaskingSet' -Alias '*',         , function Add-InitiatorIdToMaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${InitiatorIds},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.HostType],     ${HostType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSetFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorIds')) {,             [object]$__cmdletization_value = ${InitiatorIds},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorIds'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorIds'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('HostType')) {,             [object]$__cmdletization_value = ${HostType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.HostType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.HostType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddInitiatorId', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cm...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.4481408,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: arameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSetFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetPortAddresses')) {,             [object]$__cmdletization_value = ${TargetPortAddresses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddTargetPort', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Add-TargetPortToMaskingSet' -Alias '*',         , function Remove-TargetPortFromMaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.4481758,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:       [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DeviceNumbers')) {,             [object]$__cmdletization_value = ${DeviceNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceNumbers'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceNumbers'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DeviceAccesses')) {,             [object]$__cmdletization_value = ${DeviceAccesses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.AddVirtualDisk.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MaskingSet.AddVirtualDisk.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP MaskingSet.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Add-VirtualDiskToMaskingSet' -Alias '*',         , function Remove-VirtualDiskFromMaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_MaskingSet')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${MaskingSetFriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${VirtualDiskNames},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('MaskingSetUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MaskingSetFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MaskingSetFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('VirtualDiskNames')) {,             [object]$__cmdletization_value = ${VirtualDiskNames},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletiza...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.5236260,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_OffloadDataTransferSetting', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-OffloadDataTransferSetting, {,     [CmdletBinding(DefaultParameterSetName='ByStorageSubSystem', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_OffloadDataTransferSetting')],     param(,     ,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToOffloadDataTransferSetting', 'StorageSubSystem', 'OffloadDataTransferSetting', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP OffloadDataTransferSetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-OffloadDataTransferSetting' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.5969516,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_Partition', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('DiskPath')],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_DiskToPartition', 'Disk', 'Partition', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_PartitionToVolume', 'Volume', 'Partition', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToPartition', 'StorageSubSystem', 'Partition', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-Partition' -Alias '*',         , function Remove-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.5970103,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:               $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-Partition' -Alias '*',         , function Resize-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Mandatory=$true, Position=2)],     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=2)],     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=2)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, Position=2)],     [uint64],     ${Size},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Resize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Resize-Partition' -Alias '*',         , function Get-PartitionSupportedSize, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${Dr...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.5970654,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ,             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-PartitionSupportedSize' -Alias '*',         , function Add-PartitionAccessPath, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Partition')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${DiskId},,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint64[]],     ${Offset},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uint32[]],     ${DiskNumber},,     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=1)],     [Alias('Number')],     [ValidateNotNull()],     [uint32[]],     ${PartitionNumber},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Position=2)],     [Parameter(ParameterSetName='ByNumber', Position=2)],     [Parameter(ParameterSetName='ByDriveLetter', Position=2)],     [Parameter(ParameterSetName='InputObject (cdxml)', Position=2)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${AccessPath},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AssignDriveLetter},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('DiskId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskId}),         $__cmdletization_queryBuilder.FilterByProperty('DiskId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Offset') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Offset}),         $__cmdletization_queryBuilder.FilterByProperty('Offset', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DiskNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DiskNumber}),         $__cmdletization_queryBuilder.FilterByProperty('DiskNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PartitionNumber') -and (@('ByNumber') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PartitionNumber}),         $__cmdletization_queryBuilder.FilterByProperty('PartitionNumber', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccessPath')) {,             [object]$__cmdletization_value = ${AccessPath},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AssignDriveLetter')) {,             [object]$__cmdletization_value = ${AssignDriveLetter},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AssignDriveLetter'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddAccessPath', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_Pass...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.5970813,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByNumber', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AccessPath')) {,             [object]$__cmdletization_value = ${AccessPath},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AccessPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemoveAccessPath', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Partition.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-PartitionAccessPath' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.6121093,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_PhysicalDisk', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:04.7486206,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_ResiliencySetting', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-ResiliencySetting, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_ResiliencySetting')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToResiliencySetting', 'StoragePool', 'ResiliencySetting', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP ResiliencySetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-ResiliencySetting' -Alias '*',         , function Set-ResiliencySetting, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_ResiliencySetting')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_ResiliencySetting')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfDataCopiesDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${PhysicalDiskRedundancyDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfColumnsDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AutoNumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${InterleaveDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfGroupsDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Proces...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3425720,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/PS_StorageCmdlets', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Set-Disk, {,     [CmdletBinding(DefaultParameterSetName='ByNumberAttributes', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectConvertStyle', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle],     ${PartitionStyle},,     [Parameter(ParameterSetName='ByIdConvertStyle', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByPathConvertStyle', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByPath', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByPathAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Path},,     [Parameter(ParameterSetName='ByNumberConvertStyle', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNumber', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNumberAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [uint32],     ${Number},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [bool],     ${IsOffline},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsReadOnly},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [uint32],     ${Signature},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [string],     ${Guid},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectConvertStyle')],     [Parameter(ParameterSetName='ByIdConvertStyle')],     [Parameter(ParameterSetName='ByPathConvertStyle')],     [Parameter(ParameterSetName='ByNumberConvertStyle')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPath')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByPathAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectConvertStyle') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3426117,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: e,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumberConvertStyle') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Number')) {,           [object]$__cmdletization_value = ${Number},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Number'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Number'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionStyle')) {,           [object]$__cmdletization_value = ${PartitionStyle},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionStyle'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetDisk.PartitionStyle'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ById') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvo...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3426744,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: erShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Guid')) {,           [object]$__cmdletization_value = ${Guid},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Guid')) {,           [object]$__cmdletization_value = ${Guid},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPathAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_me...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3427100,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Signature')) {,           [object]$__cmdletization_value = ${Signature},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Signature'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Guid')) {,           [object]$__cmdletization_value = ${Guid},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Guid'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-Disk' -Alias '*',         , function Set-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetterSetLabel', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Alias('NewFriendlyName')],     [string],     ${NewFileSystemLabel},,     [Parameter(ParameterSetName='ByUniqueIdSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByUniqueIdSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByPathSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByPathSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [string],     ${Path},,     [Parameter(ParameterSetName='ByLabelSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByLabelSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [Alias('FriendlyName')],     [string],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetterSetLabel', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByDriveLetterSetDedup', Mandatory=$true, ValueFromPipeline=$true)],     [char],     ${DriveLetter},,     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode],     ${DedupMode},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectSetLabel')],     [Parameter(ParameterSetName='ByUniqueIdSetLabel')],     [Parameter(ParameterSetName='ByPathSetLabel')],     [Parameter(ParameterSetName='ByLabelSetLabel')],     [Parameter(ParameterSetName='ByDriveLetterSetLabel')],     [Parameter(ParameterSetName='ByObjectSetDedup')],     [Parameter(ParameterSetName='ByUniqueIdSetDedup')],     [Parameter(ParameterSetName='ByPathSetDedup')],     [Parameter(ParameterSetName='ByLabelSetDedup')],     [Parameter(ParameterSetName='ByDriveLetterSetDedup')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.Ci...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3467602,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByPathSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Path')) {,           [object]$__cmdletization_value = ${Path},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,           [object]$__cmdletization_value = ${NewFileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByLabelSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileSystemLabel')) {,           [object]$__cmdletization_value = ${FileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,           [object]$__cmdletization_value = ${NewFileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterSetLabel') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFileSystemLabel')) {,           [object]$__cmdletization_value = ${NewFileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmd...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3468536,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Path'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByLabelSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FileSystemLabel')) {,           [object]$__cmdletization_value = ${FileSystemLabel},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystemLabel'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterSetDedup') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DedupMode')) {,           [object]$__cmdletization_value = ${DedupMode},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupMode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVolume.DedupMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVolume', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-Volume' -Alias '*',         , function Set-Partition, {,     [CmdletBinding(DefaultParameterSetName='ByNumberAttributes', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAccessPath', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsReadOnly},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${NoDefaultDriveLetter},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [bool],     ${IsActive},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parame...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3469111,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  [Parameter(ParameterSetName='ByIdAccessPath')],     [Parameter(ParameterSetName='ByDriveLetterAccessPath')],     [Parameter(ParameterSetName='ByNumberAccessPath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByIdAttributes')],     [Parameter(ParameterSetName='ByDriveLetterAttributes')],     [Parameter(ParameterSetName='ByNumberAttributes')],     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByNumber')],     [Parameter(ParameterSetName='ByObjectAccessPath')],     [Parameter(ParameterSetName='ByIdAccessPath')],     [Parameter(ParameterSetName='ByDriveLetterAccessPath')],     [Parameter(ParameterSetName='ByNumberAccessPath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NoDefaultDriveLetter')) {,           [object]$__cmdletization_value = ${NoDefaultDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3469512,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetterAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NoDefaultDriveLetter')) {,           [object]$__cmdletization_value = ${NoDefaultDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerSh...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3469995,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: t]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskNumber')) {,           [object]$__cmdletization_value = ${DiskNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionNumber')) {,           [object]$__cmdletization_value = ${PartitionNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NoDefaultDriveLetter')) {,           [object]$__cmdletization_value = ${NoDefaultDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NoDefaultDriveLetter'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsActive')) {,           [object]$__cmdletization_value = ${IsActive},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsActive'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsShadowCopy')) {,           [object]$__cmdletization_value = ${IsShadowCopy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsShadowCopy'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsDAX')) {,           [object]$__cmdletization_value = ${IsDAX},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MbrType')) {,           [object]$__cmdletization_value = ${MbrType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MbrType'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('GptType')) {,           [object]$__cmdletization_value = ${GptType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GptType'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePre...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3470331,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: esent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDriveLetter') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DriveLetter')) {,           [object]$__cmdletization_value = ${DriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumber') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskNumber')) {,           [object]$__cmdletization_value = ${DiskNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionNumber')) {,           [object]$__cmdletization_value = ${PartitionNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsOffline')) {,           [object]$__cmdletization_value = ${IsOffline},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsOffline'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAccessPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDriveLetter')) {,           [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRe...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3470809,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:        [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNumberAccessPath') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('DiskNumber')) {,           [object]$__cmdletization_value = ${DiskNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiskNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PartitionNumber')) {,           [object]$__cmdletization_value = ${PartitionNumber},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PartitionNumber'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDriveLetter')) {,           [object]$__cmdletization_value = ${NewDriveLetter},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDriveLetter'; ParameterType = 'System.Char'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPartition', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-Partition' -Alias '*',         , function Set-PhysicalDisk, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${Description},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType],     ${MediaType},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${StorageEnclosureId},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [string],     ${StorageScaleUnitId},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [bool],     ${IsHidden},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,        ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3471147,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: n_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageEnclosureId')) {,           [object]$__cmdletization_value = ${StorageEnclosureId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageScaleUnitId')) {,           [object]$__cmdletization_value = ${StorageScaleUnitId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageEnclosureId')) {,           [object]$__cmdletization_value = ${StorageEnclosureId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageScaleUnitId')) {,           [object]$__cmdletization_value = ${StorageScaleUnitId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHi...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3471623,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Disk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetPhysicalDisk.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageEnclosureId')) {,           [object]$__cmdletization_value = ${StorageEnclosureId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageEnclosureId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageScaleUnitId')) {,           [object]$__cmdletization_value = ${StorageScaleUnitId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageScaleUnitId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsHidden')) {,           [object]$__cmdletization_value = ${IsHidden},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsHidden'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-PhysicalDisk' -Alias '*',         , function Set-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectDefaults', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [bool],     ${ClearOnDeallocate},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [bool],     ${IsPowerProtected},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy],     ${RepairPolicy},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks],     ${RetireMissingPhysicalDisks},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Alias('NewUsage')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Alias('NewOtherUsageDescription')],     [string],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByFriendlyName')],     [uint16[]],     ${ThinProvisioningAlertThresholds},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdDefaults', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameDefaults', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameDefaults', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Parameter(ParameterSetName='ByUniqueIdDefaults')],     [Parameter(ParameterSetName='ByNameDefaults')],     [Parameter(ParameterSetName='ByFriendlyNameDefaults')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType],     ${ProvisioningTypeDefault},,     [Parameter(ParameterSetName='ByObjectDefaults')],     [Paramete...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3471968,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: letization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThinProvisioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3472587,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: mdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThinProvisioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings =...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3473154,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ClearOnDeallocate')) {,           [object]$__cmdletization_value = ${ClearOnDeallocate},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClearOnDeallocate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsPowerProtected')) {,           [object]$__cmdletization_value = ${IsPowerProtected},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsPowerProtected'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RepairPolicy')) {,           [object]$__cmdletization_value = ${RepairPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RepairPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RepairPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('RetireMissingPhysicalDisks')) {,           [object]$__cmdletization_value = ${RetireMissingPhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetireMissingPhysicalDisks'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.RetireMissingPhysicalDisks'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ThinProvisioningAlertThresholds')) {,           [object]$__cmdletization_value = ${ThinProvisioningAlertThresholds},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThinProvisioningAlertThresholds'; ParameterType = 'System.UInt16[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectDefaults') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPrese...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3473729,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,           [object]$__cmdletization_value = ${WriteCacheSizeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdDefaults') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,           [object]$__cmdletization_value = ${ProvisioningTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,           [object]$__cmdletization_value = ${MediaTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingNameDefault')) {,           [object]$__cmdletization_value = ${ResiliencySettingNameDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,           [object]$__cmdletization_value = ${WriteCacheSizeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValu...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3474244,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: t'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('WriteCacheSizeDefault')) {,           [object]$__cmdletization_value = ${WriteCacheSizeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSizeDefault'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,           [object]$__cmdletization_value = ${AutoWriteCacheSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameDefaults') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,           [object]$__cmdletization_value = ${ProvisioningTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,           [object]$__cmdletization_value = ${MediaTypeDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingNameDefault')) {,           [object]$__cmdletization_value = ${ResiliencySettingNameDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingNameDefault'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,           [object]$__cmdletization_value = ${EnclosureAwareDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3474669,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsReadOnly')) {,           [object]$__cmdletization_value = ${IsReadOnly},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsReadOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             t...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3475031,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: (ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByNameAttributes')],     [Parameter(ParameterSetName='ByObjectProperties')],     [Parameter(ParameterSetName='ByUniqueIdProperties')],     [Parameter(ParameterSetName='ByFriendlyNameProperties')],     [Parameter(ParameterSetName='ByNameProperties')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindin...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3475438,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:        },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,           [object]$__cmdletization_value = ${OtherUsageDescription},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletizatio...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3475790,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('IsManualAttach')) {,           [object]$__cmdletization_value = ${IsManualAttach},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsManualAttach'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,           [object]$__cmdletization_value = ${StorageNodeName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Access')) {,           [object]$__cmdletization_value = ${Access},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Access'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetVirtualDisk.Access'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3476203,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: eter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdProperties') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameProperties') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('S...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3476564,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-VirtualDisk' -Alias '*',         , function Set-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueIdNewFriendlyName', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectNewFriendlyName', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectAttributes', Mandatory=$true, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectDescription', Mandatory=$true, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [string],     ${NewFriendlyName},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [uint64],     ${AllocationUnitSize},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType],     ${MediaType},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${ColumnIsolation},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage],     ${Usage},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Alias('FaultDomainRedundancy')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfGroups},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint64],     ${Interleave},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [string],     ${Description},,     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdDescription', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameDescription', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectNewFriendlyName')],     [Parameter(ParameterSetName='ByObjectAttributes')],     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdNewFriendlyName')],     [Parameter(ParameterSetName='ByUniqueIdAttributes')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameNewFriendlyName')],     [Parameter(ParameterSetName='ByFriendlyNameAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObjectNewFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInsta...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3476980,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: rameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,           [object]$__cmdletization_value = ${FaultDomainAwareness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,           [object]$__cmdletization_value = ${ColumnIsolation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,           [object]$__cmdletization_value = ${ResiliencySettingName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfGroups')) {,           [object]$__cmdletization_value = ${NumberOfGroups},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,           [object]$__cmdletization_value = ${NumberOfColumns},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Interleave')) {,           [object]$__cmdletization_value = ${Interleave},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_metho...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3477403,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: erType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueIdAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,           [object]$__cmdletization_value = ${AllocationUnitSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,           [object]$__cmdletization_value = ${FaultDomainAwareness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,           [object]$__cmdletization_value = ${ColumnIsolation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,           [object]$__cmdletization_value = ${ResiliencySettingName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.StorageTierUsage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,           [object]$__cmdletization_value = ${PhysicalDiskRedundancy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,           [object]$__cmdletization_value = ${NumberOfDataCopies},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodP...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3477956,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: etization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameNewFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewFriendlyName')) {,           [object]$__cmdletization_value = ${NewFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,           [object]$__cmdletization_value = ${ProvisioningType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,           [object]$__cmdletization_value = ${AllocationUnitSize},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('MediaType')) {,           [object]$__cmdletization_value = ${MediaType},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.SetStorageTier.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,           [object]$__cmdletization_value = ${FaultDomainAwareness},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,           [object]$__cmdletization_value = ${ColumnIsolation},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ColumnIsolation'; ParameterType = 'Microsoft.PowerS...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3478294,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,           [object]$__cmdletization_value = ${NumberOfColumns},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Interleave')) {,           [object]$__cmdletization_value = ${Interleave},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageTier' -Alias '*',         , function Set-StorageSubSystem, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueIdDescription', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObjectDescription', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [Parameter(ParameterSetName='ByObjectSetAttributes', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${Description},,     [Parameter(ParameterSetName='ByUniqueIdDescription', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyNameDescription', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByNameDescription', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByNameSetAttributes', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [bool],     ${AutomaticClusteringEnabled},,     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType],     ${FaultDomainAwarenessDefault},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescription')],     [Parameter(ParameterSetName='ByObjectSetAttributes')],     [Parameter(ParameterSetName='ByUniqueIdSetAttributes')],     [Parameter(ParameterSetName='ByFriendlyNameSetAttributes')],     [Parameter(ParameterSetName='ByNameSetAttributes')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObjectDescription')],     [Parameter(ParameterSetName='ByUniqueIdDescription')],     [Parameter(ParameterSetName='ByFriendlyNameDescription')],     [Parameter(ParameterSetName='ByNameDescripti...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3478735,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameDescription') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByObjectSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutomaticClusteringEnabled')) {,           [object]$__cmdletization_value = ${AutomaticClusteringEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3479076,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: t},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByFriendlyNameSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FriendlyName')) {,           [object]$__cmdletization_value = ${FriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutomaticClusteringEnabled')) {,           [object]$__cmdletization_value = ${AutomaticClusteringEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByNameSetAttributes') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Name')) {,           [object]$__cmdletization_value = ${Name},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('AutomaticClusteringEnabled')) {,           [object]$__cmdletization_value = ${AutomaticClusteringEnabled},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticClusteringEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,           [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Set.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetStorageSubSystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageSubSystem' -Alias '*',         , function Add-PhysicalDisk, {,     [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [Parameter(Pa...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3479542,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByStoragePool') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePool')) {,           [object]$__cmdletization_value = ${StoragePool},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName')) {,           [object]$__cmdletization_value = ${StoragePoolFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Usage')) {,           [object]$__cmdletization_value = ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolName')) {,           [object]$__cmdletization_value = ${StoragePoolName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $t...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3480249,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  ${Usage},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.AddPhysicalDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDisk')) {,           [object]$__cmdletization_value = ${VirtualDisk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName')) {,           [object]$__cmdletization_value = ${VirtualDiskFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('AddPhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskName')) {,           [object]$__cmdletization_value = ${VirtualDiskName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParamete...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3480738,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ol},,     [Parameter(ParameterSetName='ByStoragePool', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDisk', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskName', Mandatory=$true)],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisks},,     [Parameter(ParameterSetName='ByStoragePoolFriendlyName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolFriendlyName},,     [Parameter(ParameterSetName='ByStoragePoolName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolName},,     [Parameter(ParameterSetName='ByStoragePoolUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${StoragePoolUniqueId},,     [Parameter(ParameterSetName='ByVirtualDisk', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByVirtualDiskName', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskName},,     [Parameter(ParameterSetName='ByVirtualDiskUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${VirtualDiskUniqueId},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStoragePoolFriendlyName')],     [Parameter(ParameterSetName='ByStoragePoolName')],     [Parameter(ParameterSetName='ByStoragePoolUniqueId')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVirtualDiskFriendlyName')],     [Parameter(ParameterSetName='ByVirtualDiskName')],     [Parameter(ParameterSetName='ByVirtualDiskUniqueId')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByStoragePool') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePool')) {,           [object]$__cmdletization_value = ${StoragePool},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByStoragePoolFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName')) {,           [object]$__cmdletization_value = ${StoragePoolFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.M...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3481079,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Parameter]@{Name = 'StoragePoolUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StoragePoolUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDisk')) {,           [object]$__cmdletization_value = ${VirtualDisk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskFriendlyName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName')) {,           [object]$__cmdletization_value = ${VirtualDiskFriendlyName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskFriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemovePhysicalDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByVirtualDiskName') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('VirtualDiskName')) {,           [object]$__cmdletization_value = ${VirtualDiskName},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,           [object]$__cmdletization_value = ${PhysicalDisks},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3481506,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-PhysicalDisk' -Alias '*',         , function Set-FileShare, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByObject', Mandatory=$true, Position=0, ValueFromPipeline=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${Description},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [bool],     ${EncryptData},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [string],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [string],     ${Name},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByObject')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByObject') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('InputObject')) {,           [object]$__cmdletization_value = ${InputObject},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InputObject'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EncryptData')) {,           [object]$__cmdletization_value = ${EncryptData},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),         [object]$__cmdletization_defaultValueIsPresent = $true,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetFileShare', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByUniqueId') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('UniqueId')) {,           [object]$__cmdletization_value = ${UniqueId},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Description')) {,           [object]$__cmdletization_value = ${Description},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('EncryptData')) {,           [object]$__cmdletization_value = ${EncryptData},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EncryptData'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.Po...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3481716,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: tModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-FileShare' -Alias '*',         , function Get-StorageReliabilityCounter, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter')][OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter')],     param(,     ,     [Parameter(ParameterSetName='ByPhysicalDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),       switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByPhysicalDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('PhysicalDisk')) {,           [object]$__cmdletization_value = ${PhysicalDisk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageReliabilityCounter'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetStorageReliabilityCounter', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },         { @('ByDisk') -contains $_ } {,         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('Disk')) {,           [object]$__cmdletization_value = ${Disk},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Disk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Disk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageReliabilityCounter'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter',         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetStorageReliabilityCounter', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageCmdlets.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageReliabilityCounter' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3953344,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageEnclosure, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByFriendlyName', Position=1, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${SerialNumber},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [ValidateNotNull()],     [string[]],     ${Model},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageEnclosure.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByStorageNode')],     [switch],     ${PhysicallyConnected},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('SerialNumber') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${SerialNumber}),         $__cmdletization_queryBuilder.FilterByProperty('SerialNumber', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Manufacturer') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStorageSubSystem', 'ByStorageNode', 'ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Manufacturer}),         $__cmdletization_queryBuilder.FilterByProperty('Manufacturer', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Model') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStorageSubSystem', 'ByStorageNode', 'ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Model}),         $__cmdletization_queryBuilder.FilterByProperty('Model', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HealthStatus') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStorageSubSystem', 'ByStorageNode', 'ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HealthStatus}),         $__cmdletization_queryBuilder.FilterByProperty('HealthStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToStorageEnclosure', 'StorageSubSystem', 'StorageEnclosure', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageNode') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageNodeToStorageEnclosure', 'StorageNode', 'StorageEnclosure', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicalDisk') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${PhysicalDisk}, 'MSFT_StorageEnclosureToPhysicalDisk', 'PhysicalDisk', 'StorageEnclosure', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicallyConnected') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('PhysicallyConnected', ${PhysicallyConnected}),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3954022,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:       throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageEnclosure' -Alias '*',         , function Enable-StorageEnclosureIdentification, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32[]],     ${SlotNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('true', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enable'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('IdentifyElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Enable-StorageEnclosureIdentification' -Alias '*',         , function Disable-StorageEnclosureIdentification, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32[]],     ${SlotNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(Parameter...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3954261,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: letization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enable'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('IdentifyElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disable-StorageEnclosureIdentification' -Alias '*',         , function Get-StorageEnclosureVendorData, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([System.String])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${PageNumber},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PageNumber')) {,             [object]$__cmdletization_value = ${PageNumber},             $__...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3954604,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: n'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PageNumber'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VendorData'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetVendorData', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageEnclosureVendorData' -Alias '*',         , function Enable-StorageEnclosurePower, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32[]],     ${SlotNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Off'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('PowerElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmd...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.3954884,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: nThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Enable-StorageEnclosurePower' -Alias '*',         , function Disable-StorageEnclosurePower, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageEnclosure')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint32[]],     ${SlotNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('true', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Off'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlotNumbers')) {,             [object]$__cmdletization_value = ${SlotNumbers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlotNumbers'; ParameterType = 'System.UInt32[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('PowerElement', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageEnclosure.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Disable-StorageEnclosurePower' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.4571874,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageJob', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageJob, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageJob')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName')],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageJob.JobState[]],     ${JobState},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubsystem},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByVolume')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('JobState') -and (@('ByUniqueId', 'ByName', 'ByStorageSubSystem', 'ByStoragePool', 'ByVirtualDisk', 'ByDisk', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${JobState}),         $__cmdletization_queryBuilder.FilterByProperty('JobState', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubsystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubsystem}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_StorageJobToAffectedStorageObject', 'AffectedStorageObject', 'StorageJob', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageJob.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageJob' -Alias '*',         , function Stop-StorageJob, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageJob')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetN...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.5378244,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageHealth, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubsystem')],     [ValidateNotNull()],     [ciminstance],     ${Subsystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='BySubsystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='BySubsystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='BySubsystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Subsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Subsystem}, 'MSFT_StorageSubsystemToStorageHealth', 'StorageSubsystem', 'StorageHealth', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageHealth.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageHealth' -Alias '*',         , function Get-StorageHealthSettingInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealthSetting[]')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealth')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Name')) {,             [object]$__cmdletization_value = ${Name},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__c...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.5379674,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Name')) {,             [object]$__cmdletization_value = ${Name},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Value')) {,             [object]$__cmdletization_value = ${Value},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Value'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Value'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetSetting', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageHealth.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageHealthSettingInternal' -Alias '*',         , function Remove-StorageHealthSettingInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageHealth')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageHealth')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Name')) {,             [object]$__cmdletization_value = ${Name},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('RemoveSetting', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },      ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.5814604,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageNode', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageNode, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageNode')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByObjectId', ValueFromPipelineByPropertyName=$true)],     [Alias('StorageNodeObjectId')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageNode.OperationalStatus[]],     ${OperationalStatus},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageEnclosure', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance],     ${StorageEnclosure},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [switch],     ${PhysicallyConnected},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByObjectId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByVolume')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ByObjectId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('OperationalStatus') -and (@('ByUniqueId', 'ByObjectId', 'ByName', 'ByDisk', 'ByStorageSubSystem', 'ByStorageEnclosure', 'ByStoragePool', 'ByPhysicalDisk', 'ByVirtualDisk', 'ByVolume') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${OperationalStatus}),         $__cmdletization_queryBuilder.FilterByProperty('OperationalStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_StorageNodeToDisk', 'Disk', 'StorageNode', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToStorageNode', 'StorageSubSystem', 'StorageNode', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageEnclosure') -and (@('ByStorageEnclosure') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageEnclosure}, 'MSFT_StorageNodeToStorageEnclosure', 'StorageEnclosure', 'StorageNode', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStorage...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.6518181,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StoragePool', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StoragePool')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByUsage', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.Usage[]],     ${Usage},,     [Parameter(ParameterSetName='ByUsage', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [bool[]],     ${IsPrimordial},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByResiliencySetting', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_ResiliencySetting')],     [ValidateNotNull()],     [ciminstance],     ${ResiliencySetting},,     [Parameter(ParameterSetName='ByStorageTier', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance],     ${StorageTier},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByUsage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByResiliencySetting')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByStorageJob')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.6519041,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: nputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisksToUse},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${StorageFaultDomainsToUse},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('FaultDomainRedundancy')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AutoNumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint16],     ${NumberOfGroups},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [uint64],     ${Interleave},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ciminstance[]],     ${StorageTiers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64[]],     ${StorageTierSizes},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${WriteCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AutoWriteCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${ReadCacheSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${IsManualAttach},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${AddToCluster},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StoragePoolUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Usage')) {,             [object]$__cmdletization_value = ${Usage},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.CreateVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.CreateVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,             [object]$__cmdletization_value = ${OtherUsageDescription},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePrese...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.6519864,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:       $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageFaultDomainsToUse')) {,             [object]$__cmdletization_value = ${StorageFaultDomainsToUse},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageFaultDomainsToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageFaultDomainsToUse'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,             [object]$__cmdletization_value = ${PhysicalDiskRedundancy},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,             [object]$__cmdletization_value = ${NumberOfDataCopies},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,             [object]$__cmdletization_value = ${NumberOfColumns},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AutoNumberOfColumns')) {,             [object]$__cmdletization_value = ${AutoNumberOfColumns},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoNumberOfColumns'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoNumberOfColumns'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfGroups')) {,             [object]$__cmdletization_value = ${NumberOfGroups},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfGroups'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Interleave')) {,             [object]$__cmdletization_value = ${Interleave},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageTiers')) {,             [object]$__cmdletization_value = ${StorageTiers},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageTiers'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageTiers'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageTierSizes')) {,             [object]$__cmdletization_value = ${StorageTierSizes},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageTierSizes'; ParameterType = 'System.UInt64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageTierSizes'; ParameterType = 'System.UInt64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('WriteCacheSize')) {,             [object]$__cmdletization_value = ${WriteCacheSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WriteCacheSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AutoWriteCacheSize')) {,             [object]$__cmdletization_value = ${AutoWriteCacheSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdlet...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.6520567,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Name='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('FaultDomainRedundancy')],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfGroups},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${Interleave},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${Description},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StoragePoolUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,             [object]$__cmdletization_value = ${ProvisioningType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('AllocationUnitSize')) {,             [object]$__cmdletization_value = ${AllocationUnitSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MediaType')) {,             [object]$__cmdletization_value = ${MediaType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,             [object]$__cmdletization_value = ${FaultDomainAwareness},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ColumnIsolation')) {,             [object]$__cmdletization_value = ${ColumnIsolation},             ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.6521529,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateStorageTier', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StoragePool.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-StorageTier' -Alias '*',         , function Remove-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StoragePool')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DeleteObject', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StoragePool.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-StoragePool' -Alias '*',         , function Update-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StoragePool')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Para...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.6523119,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('true', 'System.Boolean'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:FromPowerShell'; ParameterType = 'System.Boolean'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Optimize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StoragePool.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Optimize-StoragePool' -Alias '*',         , function Get-VirtualDiskSupportedSize, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StoragePoolId','UniqueId')],     [ValidateNotNull()],     [string[]],     ${StoragePoolUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${StoragePoolFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StoragePoolName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)],     [Alias('Name')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StoragePoolUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePoolName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StoragePoolName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,             [object]$__cmdletization_value = ${ResiliencySettingName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwareness')) {,             [object]$__cmdletization_value = ${FaultDomainAwareness},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwareness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StoragePool.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SupportedSizes'; ParameterType = 'System.UInt64[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskSizeMin'; ParameterTy...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.7218128,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageProvider, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uri[]],     ${URI},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Manufacturer') -and (@('ByURI', 'ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Manufacturer}),         $__cmdletization_queryBuilder.FilterByProperty('Manufacturer', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('URI') -and (@('ByURI') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${URI}),         $__cmdletization_queryBuilder.FilterByProperty('URI', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageProviderToStorageSubSystem', 'StorageSubSystem', 'StorageProvider', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageProvider' -Alias '*',         , function Update-StorageProviderCache, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByURI', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [uri[]],     ${URI},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.DiscoveryLevel],     ${DiscoveryLevel},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ref],     ${RootObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByURI')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetN...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.7218998,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: y('DiscoveryLevel')) {,             [object]$__cmdletization_value = ${DiscoveryLevel},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiscoveryLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.DiscoveryLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DiscoveryLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.DiscoveryLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RootObject')) {,             [object]$__cmdletization_value = ${RootObject},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RootObject'; ParameterType = 'System.Management.Automation.PSReference'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RootObject'; ParameterType = 'System.Management.Automation.PSReference'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Discover', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Update-StorageProviderCache' -Alias '*',         , function Register-StorageSubsystem, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('ProviderId')],     [ValidateNotNull()],     [string[]],     ${ProviderUniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${ProviderName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [Alias('CN')],     [string],     ${ComputerName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [pscredential],     [System.Management.Automation.CredentialAttribute()],     ${Credential},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ProviderUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ProviderName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'ReportErrors'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ComputerName')) {,             [object]$__cmdletization_value = ${ComputerName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ComputerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ComputerName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Credential')) {,             [object]$__cmdletization_value = ${Credential},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Credential'; ParameterType = 'System.Management.Automation.PSCredential'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Credential'; ParameterType = 'System.Management.Automation.PSCredential'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_meth...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.7219399,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: (ParameterSetName='InputObject (cdxml)')],     [switch],     ${Force},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ProviderUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ProviderName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ProviderName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'ReportErrors'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId')) {,             [object]$__cmdletization_value = ${StorageSubSystemUniqueId},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageSubSystemUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageSubSystemUniqueId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Force')) {,             [object]$__cmdletization_value = ${Force},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('UnregisterSubsystem', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Unregister-StorageSubsystem' -Alias '*',         , function Set-StorageProvider, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageProvider')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('ProviderId')],     [ValidateNotNull()],     [string[]],     ${ProviderUniqueId},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${ProviderName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageProvider.RemoteSubsystemCacheMode],     ${RemoteSubsystemCacheMode},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonPara...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.7219549,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: etization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageProvider.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageProvider' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.7797379,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageReliabilityCounter', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageReliabilityCounterDeprecated, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageReliabilityCounter')],     param(,     ,     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [int],     ${ThrottleLimit},,     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageReliabilityCounter.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageReliabilityCounterDeprecated' -Alias '*',         , function Reset-StorageReliabilityCounter, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageReliabilityCounter')],     param(,     ,     [Parameter(ParameterSetName='ByPhysicalDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByDisk', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageReliabilityCounter')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('PhysicalDisk') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${PhysicalDisk}, 'MSFT_PhysicalDiskToStorageReliabilityCounter', 'PhysicalDisk', 'StorageReliabilityCounter', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_DiskToStorageReliabilityCounter', 'Disk', 'StorageReliabilityCounter', 'SilentlyContinue'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByPhysicalDisk', 'ByDisk', 'InputObject (cdxml)') -contains $_ } {,       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Reset', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageReliabilityCounter.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Reset-StorageReliabilityCounter' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.8328881,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageSetting', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageSetting, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='Get0')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Get0')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Get0')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageSetting'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Get', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageSetting' -Alias '*',         , function Set-StorageSetting, {,     [CmdletBinding(PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='Set1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.NewDiskPolicy],     ${NewDiskPolicy},,     [Parameter(ParameterSetName='Set1')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.ScrubPolicy],     ${ScrubPolicy},,     [Parameter(ParameterSetName='Set1')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='Set1')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='Set1')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,       $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('NewDiskPolicy')) {,           [object]$__cmdletization_value = ${NewDiskPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDiskPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.NewDiskPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewDiskPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.NewDiskPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),         [object]$__cmdletization_defaultValue = $null,         [object]$__cmdletization_defaultValueIsPresent = $false,         if ($PSBoundParameters.ContainsKey('ScrubPolicy')) {,           [object]$__cmdletization_value = ${ScrubPolicy},           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScrubPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.ScrubPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},         } else {,           $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScrubPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSetting.ScrubPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},         },         $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSetting.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-StorageSetting' -Alias '*',         , function Update-HostSto...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9876371,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageSubSystem, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [ValidateNotNull()],     [string[]],     ${Manufacturer},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [ValidateNotNull()],     [string[]],     ${Model},,     [Parameter(ParameterSetName='ByStorageProvider', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageProvider')],     [ValidateNotNull()],     [ciminstance],     ${StorageProvider},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ${TargetPort},,     [Parameter(ParameterSetName='ByTargetPortal', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPortal')],     [ValidateNotNull()],     [ciminstance],     ${TargetPortal},,     [Parameter(ParameterSetName='ByInitiatorId', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorId},,     [Parameter(ParameterSetName='ByOffloadDataTransferSetting', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_OffloadDataTransferSetting')],     [ValidateNotNull()],     [ciminstance],     ${OffloadDataTransferSetting},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='ByVolume', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance],     ${Volume},,     [Parameter(ParameterSetName='ByFileServer', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${FileServer},,     [Parameter(ParameterSetName='ByStorageFaultDomain', ValueFromPipeline=$true)],     [Alias('PhysicalDisk','StorageEnclosure','StorageScaleUnit','StorageChassis','StorageRack','StorageSite')],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageFaultDomain')],     [ValidateNotNull()],     [ciminstance],     ${StorageFaultDomain},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByOffloadDataTransferSetting')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByVolume')],     [Parameter(ParameterSetName='ByFileServer')],     [Parameter(ParameterSetName='ByStorageFaultDomain')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageProvider')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByInitiatorId')], ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9876559,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Cmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HealthStatus') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageProvider', 'ByStorageNode', 'ByStoragePool', 'ByVirtualDisk', 'ByMaskingSet', 'ByTargetPort', 'ByTargetPortal', 'ByInitiatorId', 'ByOffloadDataTransferSetting', 'ByDisk', 'ByPartition', 'ByVolume', 'ByFileServer', 'ByStorageFaultDomain') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HealthStatus}),         $__cmdletization_queryBuilder.FilterByProperty('HealthStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Manufacturer') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageProvider', 'ByStorageNode', 'ByStoragePool', 'ByVirtualDisk', 'ByMaskingSet', 'ByTargetPort', 'ByTargetPortal', 'ByInitiatorId', 'ByOffloadDataTransferSetting', 'ByDisk', 'ByPartition', 'ByVolume', 'ByFileServer', 'ByStorageFaultDomain') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Manufacturer}),         $__cmdletization_queryBuilder.FilterByProperty('Manufacturer', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Model') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageProvider', 'ByStorageNode', 'ByStoragePool', 'ByVirtualDisk', 'ByMaskingSet', 'ByTargetPort', 'ByTargetPortal', 'ByInitiatorId', 'ByOffloadDataTransferSetting', 'ByDisk', 'ByPartition', 'ByVolume', 'ByFileServer', 'ByStorageFaultDomain') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Model}),         $__cmdletization_queryBuilder.FilterByProperty('Model', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageProvider') -and (@('ByStorageProvider') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageProvider}, 'MSFT_StorageProviderToStorageSubSystem', 'StorageProvider', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageNode') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageSubSystemToStorageNode', 'StorageNode', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StorageSubSystemToStoragePool', 'StoragePool', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_StorageSubSystemToVirtualDisk', 'VirtualDisk', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_StorageSubSystemToMaskingSet', 'MaskingSet', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_StorageSubSystemToTargetPort', 'TargetPort', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPortal') -and (@('ByTargetPortal') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPortal}, 'MSFT_StorageSubSystemToTargetPortal', 'TargetPortal', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorId') -and (@('ByInitiatorId') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorId}, 'MSFT_StorageSubSystemToInitiatorId', 'InitiatorId', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('OffloadDataTransferSetting') -and (@('ByOffloadDataTransferSetting') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${OffloadDataTransferSetting}, 'MSFT_StorageSubSystemToOffloadDataTransferSetting', 'OffloadDataTransferSetting', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_StorageSubSystemToDisk', 'Disk', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_StorageSubSystemToPartition', 'Partition', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Volume') -and (@('ByVolume') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Volume}, 'MSFT_StorageSubSystemToVolume', 'Volume', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('FileServer') -and (@('ByFileServer') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${FileServer}, 'MSFT_StorageSubSystemToFileServer', 'FileServer', 'StorageSubSystem', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageFaultDomain') -and (@('ByStorageFaultDomain') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageFaultDomain}, 'MSFT_StorageSubSystemToStorageFaultDomain', 'StorageFaultDomain', 'StorageSubSystem', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageSubSystem' -Alias '*',         , function New-StoragePool, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [Alias('StoragePoolFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('StoragePoolUsage')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('StoragePoolOtherUsageDescription')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ciminstance[]],     ${PhysicalDisks},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType],     ${ProvisioningTypeDefault},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyN...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9876694,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:        if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Usage')) {,             [object]$__cmdletization_value = ${Usage},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,             [object]$__cmdletization_value = ${OtherUsageDescription},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDisks')) {,             [object]$__cmdletization_value = ${PhysicalDisks},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDisks'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningTypeDefault')) {,             [object]$__cmdletization_value = ${ProvisioningTypeDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MediaTypeDefault')) {,             [object]$__cmdletization_value = ${MediaTypeDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.MediaType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaTypeDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.MediaType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('EnclosureAwareDefault')) {,             [object]$__cmdletization_value = ${EnclosureAwareDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnclosureAwareDefault'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FaultDomainAwarenessDefault')) {,             [object]$__cmdletization_value = ${FaultDomainAwarenessDefault},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FaultDomainAwarenessDefault'; ParameterType = 'Microsoft.PowerShell.Cmdlet...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9876837,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: rameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoWriteCacheSize'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Version')) {,             [object]$__cmdletization_value = ${Version},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Version'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Version'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Version'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateStoragePool.Version'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedStoragePool'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateStoragePool', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-StoragePool' -Alias '*',         , function New-StorageSubsystemVirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('VirtualDiskFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.Usage],     ${Usage},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${Size},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [switch],     ${UseMaximumSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${Interleave},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfColumns},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('FaultDomainRedundancy')],     [uint16],     ${PhysicalDiskRedundancy},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint16],     ${NumberOfDataCopies},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.ParityLayout],     ${ParityLayout},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${RequestNoSinglePointOfFailure},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType],     ${ProvisioningType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${IsEnclosureAware},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.FaultDomainType],     ${FaultDomainAwareness},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdl...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9877088,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ers.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Usage')) {,             [object]$__cmdletization_value = ${Usage},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Usage'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.Usage'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('OtherUsageDescription')) {,             [object]$__cmdletization_value = ${OtherUsageDescription},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherUsageDescription'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('UseMaximumSize')) {,             [object]$__cmdletization_value = ${UseMaximumSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseMaximumSize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Interleave')) {,             [object]$__cmdletization_value = ${Interleave},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Interleave'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfColumns')) {,             [object]$__cmdletization_value = ${NumberOfColumns},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfColumns'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('PhysicalDiskRedundancy')) {,             [object]$__cmdletization_value = ${PhysicalDiskRedundancy},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PhysicalDiskRedundancy'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NumberOfDataCopies')) {,             [object]$__cmdletization_value = ${NumberOfDataCopies},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NumberOfDataCopies'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ParityLayout')) {,             [object]$__cmdletization_value = ${ParityLayout},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ParityLayout'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.ParityLayout'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ParityLayout'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateVirtualDisk.ParityLayout'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('RequestNoSinglePointOfFailure')) {,             [object]$__cmdletization_value = ${RequestNoSinglePointOfFailure},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequestNoSinglePointOfFailure'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequestNoSinglePointOfFailure'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ProvisioningType')) {,             [object]$__cmdletization_value = ${ProvisioningType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProvisioningType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.ProvisioningType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cm...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9877256,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: sent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateVirtualDisk', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-StorageSubsystemVirtualDisk' -Alias '*',         , function New-MaskingSet, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('MaskingSetFriendlyName')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${VirtualDiskNames},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${InitiatorAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${DeviceNumbers},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.DeviceAccess[]],     ${DeviceAccesses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.HostMode],     ${HostType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('VirtualDiskNames')) {,             [object]$__cmdletization_value = ${VirtualDiskNames},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VirtualDiskNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParamete...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9877398,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ation.MethodParameter]@{Name = 'DeviceAccesses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.DeviceAccess[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('HostType')) {,             [object]$__cmdletization_value = ${HostType},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.HostMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateMaskingSet.HostMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedMaskingSet'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateMaskingSet', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-MaskingSet' -Alias '*',         , function New-StorageFileServer, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubSystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${HostNames},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.CreateFileServer.FileSharingProtocol[]],     ${Protocols},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('HostNames')) {,             [object]$__cmdletization_value = ${HostNames},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HostNames'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [M...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9877518,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateFileServer', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-StorageFileServer' -Alias '*',         , function Get-StorageDiagnosticInfoInternal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNullOrEmpty()],     [string],     ${DestinationPath},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint32],     ${TimeSpan},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${ActivityId},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${ExcludeOperationalLog},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${ExcludeDiagnosticLog},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${IncludeLiveDump},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DestinationPath')) {,             [object]$__cmdletization_value = ${DestinationPath},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TimeSpan')) {,             [object]$__cmdletization_value = ${TimeSpan},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TimeSpan'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TimeSpan'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ActivityId')) {,             [object]$__cmdletization_value = ${ActivityId},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ActivityId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ActivityId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ExcludeOperationalLog')) {,             [object]$__cmdletization_value = ${ExcludeOperationalLog},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeOperationalLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeOperationalLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ExcludeDiagnosticLog')) {,             [object]$__cmdletization_value = ${ExcludeDiagnosticLog},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeDiagnosticLog'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExcludeDiagnosticLog'; ParameterType = 'System.Management.Aut...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9877646,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: structure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('ClearDiagnosticInfo', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Clear-StorageDiagnosticInfo' -Alias '*',         , function Start-StorageDiagnosticLog, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     [Alias('Enable-StorageDiagnosticLog')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageSubSystem.EnableDiagnosticLog.Level],     ${Level},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${MaxLogSize},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),            ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:05.9877737,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:      [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('MaxLogSize')) {,             [object]$__cmdletization_value = ${MaxLogSize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLogSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLogSize'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('StartDiagnosticLog', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Start-StorageDiagnosticLog' -Alias '*',         , function Stop-StorageDiagnosticLog, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     [Alias('Disable-StorageDiagnosticLog')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageSubSystem')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('StorageSubsystemId')],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${StorageSubSystemName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('StorageSubSystemUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'ReportErrors'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystemName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${StorageSubSystemName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('StopDiagnosticLog', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageSubSystem.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Stop-StorageDiagnosticLog' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.0098567,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_StorageTier', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageTier')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.StorageTier.MediaType[]],     ${MediaType},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('MediaType') -and (@('ByUniqueId', 'ByFriendlyName', 'ByStoragePool', 'ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${MediaType}),         $__cmdletization_queryBuilder.FilterByProperty('MediaType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToStorageTier', 'StoragePool', 'StorageTier', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_VirtualDiskToStorageTier', 'VirtualDisk', 'StorageTier', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageTier' -Alias '*',         , function Remove-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageTier')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.0098958,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: hodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DeleteObject', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-StorageTier' -Alias '*',         , function Resize-StorageTier, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_StorageTier')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [uint64],     ${Size},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Resize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Resize-StorageTier' -Alias '*',         , function Get-StorageTierSupportedSize, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     ,     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByFriendlyName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)],     [Alias('Name')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${ResiliencySettingName},, ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.0099118,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:       },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ResiliencySettingName')) {,             [object]$__cmdletization_value = ${ResiliencySettingName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ResiliencySettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SupportedSizes'; ParameterType = 'System.UInt64[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierSizeMin'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierSizeMax'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierSizeDivisor'; ParameterType = 'System.UInt64'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedSize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP StorageTier.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-StorageTierSupportedSize' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.0414791,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_TargetPort', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-TargetPort, {,     [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_TargetPort')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByAddress', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${PortAddress},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [Parameter(ParameterSetName='ByAddress', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.TargetPort.ConnectionType[]],     ${ConnectionType},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByTargetPortal', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPortal')],     [ValidateNotNull()],     [ciminstance],     ${TargetPortal},,     [Parameter(ParameterSetName='ByVirtualDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance],     ${VirtualDisk},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByAddress')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByTargetPortal')],     [Parameter(ParameterSetName='ByVirtualDisk')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('PortAddress') -and (@('ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${PortAddress}),         $__cmdletization_queryBuilder.FilterByProperty('PortAddress', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('ConnectionType') -and (@('ByName', 'ByAddress') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ConnectionType}),         $__cmdletization_queryBuilder.FilterByProperty('ConnectionType', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToTargetPort', 'StorageSubSystem', 'TargetPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_MaskingSetToTargetPort', 'MaskingSet', 'TargetPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPortal') -and (@('ByTargetPortal') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPortal}, 'MSFT_TargetPortToTargetPortal', 'TargetPortal', 'TargetPort', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('VirtualDisk') -and (@('ByVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${VirtualDisk}, 'MSFT_TargetPortToVirtualDisk', 'VirtualDisk', 'TargetPort', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP TargetPort.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-TargetPort' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.0785857,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_TargetPortal', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-TargetPortal, {,     [CmdletBinding(DefaultParameterSetName='ByUniqueId', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_TargetPortal')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByIPv4Address', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${IPv4Address},,     [Parameter(ParameterSetName='ByIPv6Address', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateNotNull()],     [string[]],     ${IPv6Address},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ${TargetPort},,     [Parameter(ParameterSetName='BySubsystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubsystem},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByIPv4Address')],     [Parameter(ParameterSetName='ByIPv6Address')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySubsystem')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByIPv4Address')],     [Parameter(ParameterSetName='ByIPv6Address')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySubsystem')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByIPv4Address')],     [Parameter(ParameterSetName='ByIPv6Address')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySubsystem')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('IPv4Address') -and (@('ByIPv4Address') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${IPv4Address}),         $__cmdletization_queryBuilder.FilterByProperty('IPv4Address', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('IPv6Address') -and (@('ByIPv6Address') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${IPv6Address}),         $__cmdletization_queryBuilder.FilterByProperty('IPv6Address', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_TargetPortToTargetPortal', 'TargetPort', 'TargetPortal', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageSubsystem') -and (@('BySubsystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubsystem}, 'MSFT_StorageSubSystemToTargetPortal', 'StorageSubSystem', 'TargetPortal', 'SilentlyContinue'),     },     $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP TargetPortal.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-TargetPortal' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1264121,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.Usage[]],     ${Usage},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [string[]],     ${OtherUsageDescription},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [bool[]],     ${IsSnapshot},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByPhysicalDisk')],     [Parameter(ParameterSetName='ByStorageEnclosure')],     [Parameter(ParameterSetName='ByStorageScaleUnit')],     [Parameter(ParameterSetName='ByStorageChassis')],     [Parameter(ParameterSetName='ByStorageRack')],     [Parameter(ParameterSetName='ByStorageTier')],     [Parameter(ParameterSetName='ByDisk')],     [Parameter(ParameterSetName='ByInitiatorPort')],     [Parameter(ParameterSetName='ByMaskingSet')],     [Parameter(ParameterSetName='ByInitiatorId')],     [Parameter(ParameterSetName='ByTargetPort')],     [Parameter(ParameterSetName='BySourceVirtualDisk')],     [Parameter(ParameterSetName='ByTargetVirtualDisk')],     [Parameter(ParameterSetName='ByStorageJob')],     [ValidateNotNull()],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.HealthStatus[]],     ${HealthStatus},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByPhysicalDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_PhysicalDisk')],     [ValidateNotNull()],     [ciminstance],     ${PhysicalDisk},,     [Parameter(ParameterSetName='ByStorageEnclosure', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageEnclosure')],     [ValidateNotNull()],     [ciminstance],     ${StorageEnclosure},,     [Parameter(ParameterSetName='ByStorageScaleUnit', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageScaleUnit')],     [ValidateNotNull()],     [ciminstance],     ${StorageScaleUnit},,     [Parameter(ParameterSetName='ByStorageChassis', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageChassis')],     [ValidateNotNull()],     [ciminstance],     ${StorageChassis},,     [Parameter(ParameterSetName='ByStorageRack', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageRack')],     [ValidateNotNull()],     [ciminstance],     ${StorageRack},,     [Parameter(ParameterSetName='ByStorageTier', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageTier')],     [ValidateNotNull()],     [ciminstance],     ${StorageTier},,     [Parameter(ParameterSetName='ByDisk', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Disk')],     [ValidateNotNull()],     [ciminstance],     ${Disk},,     [Parameter(ParameterSetName='ByInitiatorPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorPort')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorPort},,     [Parameter(ParameterSetName='ByMaskingSet', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_MaskingSet')],     [ValidateNotNull()],     [ciminstance],     ${MaskingSet},,     [Parameter(ParameterSetName='ByInitiatorId', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_InitiatorId')],     [ValidateNotNull()],     [ciminstance],     ${InitiatorId},,     [Parameter(ParameterSetName='ByTargetPort', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_TargetPort')],     [ValidateNotNull()],     [ciminstance],     ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1264695,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Data),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Usage') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Usage}),         $__cmdletization_queryBuilder.FilterByProperty('Usage', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('OtherUsageDescription') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${OtherUsageDescription}),         $__cmdletization_queryBuilder.FilterByProperty('OtherUsageDescription', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('IsSnapshot') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${IsSnapshot}),         $__cmdletization_queryBuilder.FilterByProperty('IsSnapshot', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('HealthStatus') -and (@('ByUniqueId', 'ByFriendlyName', 'ByName', 'ByStorageSubSystem', 'ByStorageNode', 'ByStoragePool', 'ByPhysicalDisk', 'ByStorageEnclosure', 'ByStorageScaleUnit', 'ByStorageChassis', 'ByStorageRack', 'ByStorageTier', 'ByDisk', 'ByInitiatorPort', 'ByMaskingSet', 'ByInitiatorId', 'ByTargetPort', 'BySourceVirtualDisk', 'ByTargetVirtualDisk', 'ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${HealthStatus}),         $__cmdletization_queryBuilder.FilterByProperty('HealthStatus', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('StorageSubSystem') -and (@('ByStorageSubSystem') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageSubSystem}, 'MSFT_StorageSubSystemToVirtualDisk', 'StorageSubSystem', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageNode') -and (@('ByStorageNode') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageNode}, 'MSFT_StorageNodeToVirtualDisk', 'StorageNode', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StoragePool') -and (@('ByStoragePool') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StoragePool}, 'MSFT_StoragePoolToVirtualDisk', 'StoragePool', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicalDisk') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${PhysicalDisk}, 'MSFT_VirtualDiskToPhysicalDisk', 'PhysicalDisk', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageEnclosure') -and (@('ByStorageEnclosure') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageEnclosure}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageScaleUnit') -and (@('ByStorageScaleUnit') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageScaleUnit}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageChassis') -and (@('ByStorageChassis') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageChassis}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageRack') -and (@('ByStorageRack') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageRack}, 'MSFT_VirtualDiskToStorageFaultDomain', 'StorageFaultDomain', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageTier') -and (@('ByStorageTier') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageTier}, 'MSFT_VirtualDiskToStorageTier', 'StorageTier', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('Disk') -and (@('ByDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Disk}, 'MSFT_VirtualDiskToDisk', 'Disk', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorPort') -and (@('ByInitiatorPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorPort}, 'MSFT_VirtualDiskToInitiatorPort', 'InitiatorPort', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('MaskingSet') -and (@('ByMaskingSet') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${MaskingSet}, 'MSFT_MaskingSetToVirtualDisk', 'MaskingSet', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('InitiatorId') -and (@('ByInitiatorId') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${InitiatorId}, 'MSFT_InitiatorIdToVirtualDisk', 'InitiatorId', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetPort') -and (@('ByTargetPort') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetPort}, 'MSFT_TargetPortToVirtualDisk', 'TargetPort', 'VirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('SourceVirtualDisk') -and (@('BySourceVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${SourceVirtualDisk}, 'MSFT_VirtualDiskToVirtualDisk', 'SourceVirtualDisk', 'TargetVirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('TargetVirtualDisk') -and (@('ByTargetVirtualDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${TargetVirtualDisk}, 'MSFT_VirtualDiskToVirtualDisk', 'TargetVirtualDisk', 'SourceVirtualDisk', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('StorageJob') -and (@('ByStorageJob') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${StorageJob}, 'MSFT_StorageJobToAffectedStorageObject', 'StorageJob', 'AffectedStorageObject', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('PhysicalRangeMin') -and (@('ByPhysicalDisk') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.AddQueryOption('PhysicalRangeMin', ${PhysicalRangeMin}),     },     if ($PSBoundParameters.ContainsKey('PhysicalRangeMax') -and (@('ByPhysicalDisk') -contains $PSCmdlet.Paramete...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1265045,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('DeleteObject', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Remove-VirtualDisk' -Alias '*',         , function Show-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Low', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${InitiatorAddress},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Microsoft.PowerShell.Cmdletization.GeneratedTypes.VirtualDisk.Expose.HostType],     ${HostType},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetPortAddresses')) {,             [object]$__cmdletization_value = ${TargetPortAddresses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorAddress')) {,             [object]$__cmdletization_value = ${InitiatorAddress},       ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1265390,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: UniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string[]],     ${TargetPortAddresses},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${InitiatorAddress},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetPortAddresses')) {,             [object]$__cmdletization_value = ${TargetPortAddresses},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetPortAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('InitiatorAddress')) {,             [object]$__cmdletization_value = ${InitiatorAddress},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitiatorAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Hide', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Hide-VirtualDisk' -Alias '*',         , function New-VirtualDiskSnapshot, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('VirtualDiskId')],     [ValidateNotNull()],     [string[]],     ${VirtualDiskUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${TargetStoragePoolName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFrien...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1266462,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: dd($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedVirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CreateSnapshot', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'New-VirtualDiskSnapshot' -Alias '*',         , function New-VirtualDiskClone, {,     [CmdletBinding(PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('VirtualDiskId')],     [ValidateNotNull()],     [string[]],     ${VirtualDiskUniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskFriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${VirtualDiskName},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)],     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true)],     [Parameter(ParameterSetName='ByName', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FriendlyName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${TargetStoragePoolName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('VirtualDiskUniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskUniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDiskFriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskFriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('VirtualDiskName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${VirtualDiskName}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FriendlyName')) {,             [object]$__cmdletization_value = ${FriendlyName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FriendlyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TargetStoragePoolName')) {,             [object]$__cmdletization_value = ${TargetStoragePoolName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetStoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TargetStoragePoolName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CreatedVirtualDisk'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePri...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1268100,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Size')) {,             [object]$__cmdletization_value = ${Size},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Size'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Resize', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Resize-VirtualDisk' -Alias '*',         , function Repair-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1269823,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:  {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,             [object]$__cmdletization_value = ${StorageNodeName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Attach', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP VirtualDisk.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Connect-VirtualDisk' -Alias '*',         , function Disconnect-VirtualDisk, {,     [CmdletBinding(DefaultParameterSetName='ByFriendlyName', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_VirtualDisk')],     param(,     ,     [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByFriendlyName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${FriendlyName},,     [Parameter(ParameterSetName='ByName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Name},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_VirtualDisk')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [string],     ${StorageNodeName},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByFriendlyName')],     [Parameter(ParameterSetName='ByName')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FriendlyName') -and (@('ByFriendlyName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FriendlyName}),         $__cmdletization_queryBuilder.FilterByProperty('FriendlyName', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Name}),         $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ByUniqueId', 'ByFriendlyName', 'ByName', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('StorageNodeName')) {,             [object]$__cmdletization_value = ${StorageNodeName},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StorageNodeName'; ParameterType = 'System.String';...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1996042,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: , #requires -version 3.0, try { Microsoft.PowerShell.Core/Set-StrictMode -Off } catch { }, $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module, $script:ClassName = 'ROOT/Microsoft/Windows/Storage/MSFT_Volume', $script:ClassVersion = '', $script:ModuleVersion = '1.0.0.0', $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter], $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new(), Microsoft.PowerShell.Core/Export-ModuleMember -Function @(),         , function __cmdletization_BindCommonParameters, {,     param(,         $__cmdletization_objectModelWrapper,,         $myPSBoundParameters,     )       ,                 ,         if ($myPSBoundParameters.ContainsKey('CimSession')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] ,         },                     ,         if ($myPSBoundParameters.ContainsKey('AsJob')) { ,             $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] ,         },                     , },                 , function Get-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByUniqueId', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${UniqueId},,     [Parameter(ParameterSetName='ByPaths', ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='ByDiskImage', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_DiskImage')],     [ValidateNotNull()],     [ciminstance],     ${DiskImage},,     [Parameter(ParameterSetName='ByStorageSubSystem', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageSubSystem')],     [ValidateNotNull()],     [ciminstance],     ${StorageSubSystem},,     [Parameter(ParameterSetName='ByStoragePool', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StoragePool')],     [ValidateNotNull()],     [ciminstance],     ${StoragePool},,     [Parameter(ParameterSetName='ByStorageNode', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageNode')],     [ValidateNotNull()],     [ciminstance],     ${StorageNode},,     [Parameter(ParameterSetName='ByStorageFileServer', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileServer')],     [ValidateNotNull()],     [ciminstance],     ${StorageFileServer},,     [Parameter(ParameterSetName='ByFileShare', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_FileShare')],     [ValidateNotNull()],     [ciminstance],     ${FileShare},,     [Parameter(ParameterSetName='ByStorageJob', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_StorageJob')],     [ValidateNotNull()],     [ciminstance],     ${StorageJob},,     [Parameter(ParameterSetName='ByFilePath', ValueFromPipelineByPropertyName=$true)],     [Alias('FullName')],     [ValidateNotNullOrEmpty()],     [string],     ${FilePath},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByDiskImage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageFileServer')],     [Parameter(ParameterSetName='ByFileShare')],     [Parameter(ParameterSetName='ByStorageJob')],     [Parameter(ParameterSetName='ByFilePath')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByDiskImage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageFileServer')],     [Parameter(ParameterSetName='ByFileShare')],     [Parameter(ParameterSetName='ByStorageJob')],     [Parameter(ParameterSetName='ByFilePath')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByUniqueId')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='ByDiskImage')],     [Parameter(ParameterSetName='ByStorageSubSystem')],     [Parameter(ParameterSetName='ByStoragePool')],     [Parameter(ParameterSetName='ByStorageNode')],     [Parameter(ParameterSetName='ByStorageFileServer')],     [Parameter(ParameterSetName='ByFileShare')],     [Parameter(ParameterSetName='ByStorageJob')],     [Parameter(ParameterSetName='ByFilePath')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('UniqueId') -and (@('ByUniqueId') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${UniqueId}),         $__cmdletization_queryBuilder.FilterByProperty('UniqueId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_PartitionToVolume', 'Partition', 'Volume', 'SilentlyContinue'),     },     if ($PSBoundParameters.ContainsKey('DiskImage') -and (@...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1996225,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: er),             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-Volume' -Alias '*',         , function Format-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)],     [Alias('Initialize-Volume')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])][OutputType('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='ByPartition', ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Partition')],     [ValidateNotNull()],     [ciminstance],     ${Partition},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [ValidateSet('FAT','FAT32','exFAT','NTFS','ReFS')],     [string],     ${FileSystem},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('NewFriendlyName')],     [string],     ${NewFileSystemLabel},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('ClusterSize')],     [uint32],     ${AllocationUnitSize},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Full},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Force},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Compress},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${ShortFileNameSupport},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${SetIntegrityStreams},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${UseLargeFRS},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${DisableHeatGathering},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [bool],     ${IsDAX},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='ByPartition')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Partition') -and (@('ByPartition') -contains $PSCmdlet.ParameterSetName )) {,     $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Partition}, 'MSFT_PartitionToVolume', 'Partition', 'Volume', 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetNam...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1996358,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: Name = 'AllocationUnitSize'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllocationUnitSize'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Full')) {,             [object]$__cmdletization_value = ${Full},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Full'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Full'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Force')) {,             [object]$__cmdletization_value = ${Force},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Compress')) {,             [object]$__cmdletization_value = ${Compress},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Compress'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Compress'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ShortFileNameSupport')) {,             [object]$__cmdletization_value = ${ShortFileNameSupport},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ShortFileNameSupport'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ShortFileNameSupport'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SetIntegrityStreams')) {,             [object]$__cmdletization_value = ${SetIntegrityStreams},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SetIntegrityStreams'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SetIntegrityStreams'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('UseLargeFRS')) {,             [object]$__cmdletization_value = ${UseLargeFRS},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseLargeFRS'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseLargeFRS'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('DisableHeatGathering')) {,             [object]$__cmdletization_value = ${DisableHeatGathering},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHeatGathering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHeatGathering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('IsDAX')) {,             [object]$__cmdletization_value = ${IsDAX},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IsDAX'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FormattedVolume'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume',           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Format', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },    ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1996486,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText:    [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${Scan},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('OfflineScanAndFix')) {,             [object]$__cmdletization_value = ${OfflineScanAndFix},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OfflineScanAndFix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OfflineScanAndFix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SpotFix')) {,             [object]$__cmdletization_value = ${SpotFix},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SpotFix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SpotFix'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Scan')) {,             [object]$__cmdletization_value = ${Scan},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Scan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Scan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.Volume.RepairStatus'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Repair', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Repair-Volume' -Alias '*',         , function Optimize-Volume, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)],     ,     [OutputType([System.UInt32])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1996710,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: 'ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('ReTrim')) {,             [object]$__cmdletization_value = ${ReTrim},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReTrim'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReTrim'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Analyze')) {,             [object]$__cmdletization_value = ${Analyze},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Analyze'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Analyze'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('Defrag')) {,             [object]$__cmdletization_value = ${Defrag},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Defrag'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Defrag'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('SlabConsolidate')) {,             [object]$__cmdletization_value = ${SlabConsolidate},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlabConsolidate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SlabConsolidate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('TierOptimize')) {,             [object]$__cmdletization_value = ${TierOptimize},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierOptimize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TierOptimize'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('NormalPriority')) {,             [object]$__cmdletization_value = ${NormalPriority},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NormalPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NormalPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'System.UInt32'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPara...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1996941,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: ()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SupportedFileSystems'; ParameterType = 'System.String[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedFileSystems', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-SupportedFileSystems' -Alias '*',         , function Get-SupportedClusterSizes, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([System.UInt32[]])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Mandatory=$true)],     [Parameter(ParameterSetName='ByPaths', Mandatory=$true)],     [Parameter(ParameterSetName='ByLabel', Mandatory=$true)],     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true)],     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)],     [ValidateNotNull()],     [ValidateNotNullOrEmpty()],     [string],     ${FileSystem},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exc...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1997099,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: er]@{Name = 'SupportedClusterSizes'; ParameterType = 'System.UInt32[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,           if ($PSBoundParameters.ContainsKey('FileSystem')) {,             [object]$__cmdletization_value = ${FileSystem},             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystem'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true},           } else {,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FileSystem'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           },           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetSupportedClusterSizes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-SupportedClusterSizes' -Alias '*',         , function Get-VolumeCorruptionCount, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([System.UInt32])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CorruptionCount'; ParameterType = 'System.UInt32'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetCorruptionCount', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },        ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1997222,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: r(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VolumeScrubEnabled'; ParameterType = 'System.Boolean'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetAttributes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-VolumeScrubPolicy' -Alias '*',         , function Set-VolumeScrubPolicy, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById', Position=1)],     [Parameter(ParameterSetName='ByPaths', Position=1)],     [Parameter(ParameterSetName='ByLabel', Position=1)],     [Parameter(ParameterSetName='ByDriveLetter', Position=1)],     [Parameter(ParameterSetName='InputObject (cdxml)', Position=1)],     [bool],     ${Enable},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, ...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1997339,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetAttributes', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Set-VolumeScrubPolicy' -Alias '*',         , function Write-VolumeCache, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     [Alias('Write-FileSystemCache','Flush-Volume')],     [OutputType([Microsoft.Management.Infrastructure.CimInstance])], [OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/Microsoft/Windows/Storage/MSFT_Volume')],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [char[]],     ${DriveLetter},,     [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)],     [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_Volume')],     [ValidateNotNull()],     [ciminstance[]],     ${InputObject},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [Alias('Session')],     [ValidateNotNullOrEmpty()],     [CimSession[]],     ${CimSession},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [int],     ${ThrottleLimit},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${AsJob},,     [Parameter(ParameterSetName='ById')],     [Parameter(ParameterSetName='ByPaths')],     [Parameter(ParameterSetName='ByLabel')],     [Parameter(ParameterSetName='ByDriveLetter')],     [Parameter(ParameterSetName='InputObject (cdxml)')],     [switch],     ${PassThru}),     DynamicParam {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new(),                 $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData),                 if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters]),                 {,                     ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters(),                 },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },     Begin {,         $__cmdletization_exceptionHasBeenThrown = $false,         try ,         {,             __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters,             $__cmdletization_objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Flush', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Write-VolumeCache' -Alias '*',         , function Get-DedupProperties, {,     [CmdletBinding(DefaultParameterSetName='ByDriveLetter', PositionalBinding=$false)],     ,     [OutputType([Microsoft.Management.Infrastructure.CimInstance])],     param(,     ,     [Parameter(ParameterSetName='ById', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('Id')],     [ValidateNotNull()],     [string[]],     ${ObjectId},,     [Parameter(ParameterSetName='ByPaths', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [ValidateNotNull()],     [string[]],     ${Path},,     [Parameter(ParameterSetName='ByLabel', Mandatory=$true, ValueFromPipelineByPropertyName=$true)],     [Alias('FriendlyName')],     [ValidateNotNull()],     [string[]],     ${FileSystemLabel},,     [Parameter(ParameterSetName='ByDriveLetter', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$tru...[truncated]",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:06.1997401,Event Time,Event Logs,EZ Tools,Contains contents of scripts run,Microsoft-Windows-PowerShell/Operational,"Channel: Microsoft-Windows-PowerShell/Operational | Computer: DESKTOP-704R550 | Path:  | ScriptBlockText: objectModelWrapper.BeginProcessing(),         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     Process {,         try ,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,     $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder(),     if ($PSBoundParameters.ContainsKey('ObjectId') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${ObjectId}),         $__cmdletization_queryBuilder.FilterByProperty('ObjectId', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('Path') -and (@('ByPaths') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${Path}),         $__cmdletization_queryBuilder.FilterByProperty('Path', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('FileSystemLabel') -and (@('ByLabel') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${FileSystemLabel}),         $__cmdletization_queryBuilder.FilterByProperty('FileSystemLabel', $__cmdletization_values, $true, 'Default'),     },     if ($PSBoundParameters.ContainsKey('DriveLetter') -and (@('ByDriveLetter') -contains $PSCmdlet.ParameterSetName )) {,         $__cmdletization_values = @(${DriveLetter}),         $__cmdletization_queryBuilder.FilterByProperty('DriveLetter', $__cmdletization_values, $false, 'Default'),     },     $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new(),     switch -exact ($PSCmdlet.ParameterSetName) { ,         { @('ById', 'ByPaths', 'ByLabel', 'ByDriveLetter', 'InputObject (cdxml)') -contains $_ } {,           [object]$__cmdletization_defaultValue = $null,           [object]$__cmdletization_defaultValueIsPresent = $false,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DedupProperties'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),           [object]$__cmdletization_defaultValue = [System.Management.Automation.LanguagePrimitives]::ConvertTo('Microsoft.PowerShell', 'System.String'),           [object]$__cmdletization_defaultValueIsPresent = $true,             $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:SourceCaller'; ParameterType = 'System.String'; Bindings = '0'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent},           $__cmdletization_methodParameters.Add($__cmdletization_methodParameter),       $__cmdletization_returnValue = $null,       $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('GetDedupProperties', $__cmdletization_methodParameters, $__cmdletization_returnValue),       $__cmdletization_passThru = $false,             if ($PSBoundParameters.ContainsKey('InputObject')) {,                 foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) },             } else {,                 $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru),             },         },     },             },         },         catch,         {,             $__cmdletization_exceptionHasBeenThrown = $true,             throw,         },     },         ,     End {,         try,         {,             if (-not $__cmdletization_exceptionHasBeenThrown),             {,                 $__cmdletization_objectModelWrapper.EndProcessing(),             },         },         catch,         {,             throw,         },     },     # .EXTERNALHELP Volume.cdxml-Help.xml, }, Microsoft.PowerShell.Core/Export-ModuleMember -Function 'Get-DedupProperties' -Alias '*',         ,",,4104,,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:20.1562304,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:20.1706410,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:21.8155622,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:21.9250296,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:22.7540393,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:22.7750946,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:31.3953905,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/PushToInstall/Registration | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Version&gt;1.0&lt;/Version&gt;,     &lt;URI&gt;/Microsoft/Windows/PushToInstall/Registration&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;GRGX;;;SU)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;P1D&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2025-05-03T17:27:31&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;Delay&gt;PT15M&lt;/Delay&gt;,       &lt;StateName&gt;750CBCA3290B9641&lt;/StateName&gt;,       &lt;Data&gt;01&lt;/Data&gt;,       &lt;DataOffset&gt;0&lt;/DataOffset&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;HighestAvailable&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;true&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT1H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%windir%/system32/sc.exe&lt;/Command&gt;,       &lt;Arguments&gt;start pushtoinstall registration&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:35.0983868,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Device Information/Device | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Version&gt;1.0&lt;/Version&gt;,     &lt;URI&gt;/Microsoft/Windows/Device Information/Device&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;;GA;;;BA)(A;;GA;;;SY)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;P1D&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2008-09-01T03:00:00&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;RandomDelay&gt;PT2H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger id='WNF_DEP_OOBE_COMPLETE'&gt;,       &lt;Enabled&gt;false&lt;/Enabled&gt;,       &lt;StateName&gt;750CBCA3290B9641&lt;/StateName&gt;,       &lt;Data&gt;01&lt;/Data&gt;,       &lt;DataOffset&gt;0&lt;/DataOffset&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;P4D&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%windir%/system32/devicecensus.exe&lt;/Command&gt;,       &lt;Arguments&gt;SystemCxt&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:35.1523162,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Device Information/Device | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Version&gt;1.0&lt;/Version&gt;,     &lt;URI&gt;/Microsoft/Windows/Device Information/Device&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;;GA;;;BA)(A;;GA;;;SY)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;P1D&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2008-09-01T03:00:00&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;RandomDelay&gt;PT2H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger id='WNF_DEP_OOBE_COMPLETE'&gt;,       &lt;Enabled&gt;false&lt;/Enabled&gt;,       &lt;StateName&gt;750CBCA3290B9641&lt;/StateName&gt;,       &lt;Data&gt;01&lt;/Data&gt;,       &lt;DataOffset&gt;0&lt;/DataOffset&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;P4D&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%windir%/system32/devicecensus.exe&lt;/Command&gt;,       &lt;Arguments&gt;SystemCxt&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:39.0994876,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Flighting/OneSettings/RefreshCache | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/wosc.dll,-602)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/wosc.dll,-601)&lt;/Author&gt;,     &lt;Description&gt;$(@%systemroot%/system32/wosc.dll,-603)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/Flighting/OneSettings/RefreshCache&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FRFX;;;AU)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;PT415M&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2025-05-04T02:36:39.086Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;RandomDelay&gt;PT1H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;StateName&gt;7538BCA33A019502&lt;/StateName&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;false&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT5M&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{E07647F7-AED2-48D9-9720-939BC24A8A3C}&lt;/ClassId&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:46.2298432,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:27:46.2417621,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:04:19.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:27.1377000,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:27.1876518,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:28.1109446,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:28.1193762,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:28.4014433,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:28.4116729,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:28.6580071,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Flighting/OneSettings/RefreshCache | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/wosc.dll,-602)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/wosc.dll,-601)&lt;/Author&gt;,     &lt;Description&gt;$(@%systemroot%/system32/wosc.dll,-603)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/Flighting/OneSettings/RefreshCache&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FRFX;;;AU)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;PT415M&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2025-05-04T02:37:28.637Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;RandomDelay&gt;PT1H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;StateName&gt;7538BCA33A019502&lt;/StateName&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;false&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT5M&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{E07647F7-AED2-48D9-9720-939BC24A8A3C}&lt;/ClassId&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:39.0646061,Event Time,Event Logs,EZ Tools,Scheduled Task created,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /OneDrive Standalone Update Task-S-1-5-21-1997604072-4269234789-1972170147-1000 | TaskContent: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Author&gt;Microsoft Corporation&lt;/Author&gt;,     &lt;URI&gt;/OneDrive Standalone Update Task-S-1-5-21-1997604072-4269234789-1972170147-1000&lt;/URI&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;1992-05-01T17:00:00&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;P1D&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;RandomDelay&gt;PT4H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;P1D&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%localappdata%/Microsoft/OneDrive/OneDriveStandaloneUpdater.exe&lt;/Command&gt;,       &lt;Arguments /&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;DESKTOP-704R550/admin0x&lt;/UserId&gt;,       &lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;, &lt;/Task&gt;",,4698,DESKTOP-704R550/admin0x,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:39.2180637,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /OneDrive Reporting Task-S-1-5-21-1997604072-4269234789-1972170147-1000 | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Author&gt;Microsoft Corporation&lt;/Author&gt;,     &lt;URI&gt;/OneDrive Reporting Task-S-1-5-21-1997604072-4269234789-1972170147-1000&lt;/URI&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-02T18:29:39&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;P1D&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-21-1997604072-4269234789-1972170147-1000&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,     &lt;RestartOnFailure&gt;,       &lt;Interval&gt;PT30M&lt;/Interval&gt;,       &lt;Count&gt;2&lt;/Count&gt;,     &lt;/RestartOnFailure&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%localappdata%/Microsoft/OneDrive/OneDriveStandaloneUpdater.exe&lt;/Command&gt;,       &lt;Arguments&gt;/reporting&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,DESKTOP-704R550/admin0x,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:39.2269250,Event Time,Event Logs,EZ Tools,Scheduled Task created,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /OneDrive Startup Task-S-1-5-21-1997604072-4269234789-1972170147-1000 | TaskContent: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Author&gt;Microsoft Corporation&lt;/Author&gt;,     &lt;URI&gt;/OneDrive Startup Task-S-1-5-21-1997604072-4269234789-1972170147-1000&lt;/URI&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;LogonTrigger&gt;,       &lt;ExecutionTimeLimit&gt;PT5M&lt;/ExecutionTimeLimit&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;UserId&gt;S-1-5-21-1997604072-4269234789-1972170147-1000&lt;/UserId&gt;,       &lt;Delay&gt;PT10M&lt;/Delay&gt;,     &lt;/LogonTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-21-1997604072-4269234789-1972170147-1000&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,     &lt;RestartOnFailure&gt;,       &lt;Interval&gt;PT30M&lt;/Interval&gt;,       &lt;Count&gt;2&lt;/Count&gt;,     &lt;/RestartOnFailure&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDriveLauncher.exe&lt;/Command&gt;,       &lt;Arguments&gt;/startInstances&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4698,DESKTOP-704R550/admin0x,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:39.6729198,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:39.6829367,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:46:26.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:29:58.5449814,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/SoftwareProtectionPlatform/SvcRestartTask | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/sppc.dll,-200)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/sppc.dll,-200)&lt;/Author&gt;,     &lt;Version&gt;1.0&lt;/Version&gt;,     &lt;Description&gt;$(@%systemroot%/system32/sppc.dll,-201)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/SoftwareProtectionPlatform/SvcRestartTask&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FA;;;S-1-5-80-123231216-2592883651-3715271367-3753151631-4175906628)(A;;FR;;;S-1-5-87-2912274048-3994893941-1669128114-1310430903-1263774323)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;CalendarTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T03:30:58Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;ScheduleByDay&gt;,         &lt;DaysInterval&gt;1&lt;/DaysInterval&gt;,       &lt;/ScheduleByDay&gt;,     &lt;/CalendarTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='NetworkService'&gt;,       &lt;UserId&gt;S-1-5-20&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;false&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT0S&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,     &lt;RestartOnFailure&gt;,       &lt;Interval&gt;PT1M&lt;/Interval&gt;,       &lt;Count&gt;3&lt;/Count&gt;,     &lt;/RestartOnFailure&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='NetworkService'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{B1AEBB5D-EAD9-4476-B375-9C3ED9F32AFC}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[timer]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:31:19.0145347,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Flighting/OneSettings/RefreshCache | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/wosc.dll,-602)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/wosc.dll,-601)&lt;/Author&gt;,     &lt;Description&gt;$(@%systemroot%/system32/wosc.dll,-603)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/Flighting/OneSettings/RefreshCache&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FRFX;;;AU)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;PT415M&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2025-05-04T02:37:18.996Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;RandomDelay&gt;PT1H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;StateName&gt;7538BCA33A019502&lt;/StateName&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;false&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT5M&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{E07647F7-AED2-48D9-9720-939BC24A8A3C}&lt;/ClassId&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:31:48.9942068,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/SoftwareProtectionPlatform/SvcRestartTask | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/sppc.dll,-200)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/sppc.dll,-200)&lt;/Author&gt;,     &lt;Version&gt;1.0&lt;/Version&gt;,     &lt;Description&gt;$(@%systemroot%/system32/sppc.dll,-201)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/SoftwareProtectionPlatform/SvcRestartTask&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FA;;;S-1-5-80-123231216-2592883651-3715271367-3753151631-4175906628)(A;;FR;;;S-1-5-87-2912274048-3994893941-1669128114-1310430903-1263774323)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;CalendarTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T03:30:48Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;ScheduleByDay&gt;,         &lt;DaysInterval&gt;1&lt;/DaysInterval&gt;,       &lt;/ScheduleByDay&gt;,     &lt;/CalendarTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='NetworkService'&gt;,       &lt;UserId&gt;S-1-5-20&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;false&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT0S&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,     &lt;RestartOnFailure&gt;,       &lt;Interval&gt;PT1M&lt;/Interval&gt;,       &lt;Count&gt;3&lt;/Count&gt;,     &lt;/RestartOnFailure&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='NetworkService'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{B1AEBB5D-EAD9-4476-B375-9C3ED9F32AFC}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[timer]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:41.9397837,Event Time,Event Logs,EZ Tools,Scheduled Task created,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Defrag/ScheduledDefrag | TaskContent: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/defragsvc.dll,-800)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/defragsvc.dll,-801)&lt;/Author&gt;,     &lt;Description&gt;$(@%systemroot%/system32/defragsvc.dll,-802)&lt;/Description&gt;,     &lt;SecurityDescriptor&gt;D:AI(A;;FA;;;BA)(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FR;;;AU)&lt;/SecurityDescriptor&gt;,     &lt;URI&gt;/Microsoft/Windows/Defrag/ScheduledDefrag&lt;/URI&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers /&gt;,   &lt;Settings&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;MaintenanceSettings&gt;,       &lt;Period&gt;P7D&lt;/Period&gt;,       &lt;Deadline&gt;P1M&lt;/Deadline&gt;,       &lt;Exclusive&gt;false&lt;/Exclusive&gt;,     &lt;/MaintenanceSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,   &lt;/Settings&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;HighestAvailable&lt;/RunLevel&gt;,       &lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%windir%/system32/defrag.exe&lt;/Command&gt;,       &lt;Arguments&gt;-c -h -o -$&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4698,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:46.0477005,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:37:45.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:46.1085808,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:37:45.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:46.4629666,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:37:45.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:46.4714274,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/UpdateOrchestrator/Schedule Work | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.2' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;URI&gt;/Microsoft/Windows/UpdateOrchestrator/Schedule Work&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FRFX;;;LS)(A;;FRFX;;;BA)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T05:37:45.000Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;/TimeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;Duration&gt;PT10M&lt;/Duration&gt;,       &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;Exec&gt;,       &lt;Command&gt;%systemroot%/system32/usoclient.exe&lt;/Command&gt;,       &lt;Arguments&gt;StartWork&lt;/Arguments&gt;,     &lt;/Exec&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:47.6769965,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64 | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Date&gt;2010-09-30T14:53:37.9516706&lt;/Date&gt;,     &lt;URI&gt;/Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;OICI;FA;;;BA)(A;OICI;FA;;;SY)(A;OICI;GR;;;AU)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers /&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;SYSTEM&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;MaintenanceSettings&gt;,       &lt;Period&gt;P1D&lt;/Period&gt;,       &lt;Deadline&gt;P2D&lt;/Deadline&gt;,       &lt;Exclusive&gt;false&lt;/Exclusive&gt;,     &lt;/MaintenanceSettings&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{429BC048-379E-45E0-80E4-EB1977941B5C}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[/RuntimeWide]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:33:57.1394014,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/Flighting/OneSettings/RefreshCache | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/wosc.dll,-602)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/wosc.dll,-601)&lt;/Author&gt;,     &lt;Description&gt;$(@%systemroot%/system32/wosc.dll,-603)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/Flighting/OneSettings/RefreshCache&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FRFX;;;AU)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;TimeTrigger&gt;,       &lt;Repetition&gt;,         &lt;Interval&gt;PT415M&lt;/Interval&gt;,         &lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;,       &lt;/Repetition&gt;,       &lt;StartBoundary&gt;2025-05-04T02:36:57.105Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;RandomDelay&gt;PT1H&lt;/RandomDelay&gt;,     &lt;/TimeTrigger&gt;,     &lt;WnfStateChangeTrigger&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;StateName&gt;7538BCA33A019502&lt;/StateName&gt;,     &lt;/WnfStateChangeTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='LocalSystem'&gt;,       &lt;UserId&gt;S-1-5-18&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;true&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;false&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;false&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT5M&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='LocalSystem'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{E07647F7-AED2-48D9-9720-939BC24A8A3C}&lt;/ClassId&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:35:12.5372923,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/SoftwareProtectionPlatform/SvcRestartTask | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Source&gt;$(@%systemroot%/system32/sppc.dll,-200)&lt;/Source&gt;,     &lt;Author&gt;$(@%systemroot%/system32/sppc.dll,-200)&lt;/Author&gt;,     &lt;Version&gt;1.0&lt;/Version&gt;,     &lt;Description&gt;$(@%systemroot%/system32/sppc.dll,-201)&lt;/Description&gt;,     &lt;URI&gt;/Microsoft/Windows/SoftwareProtectionPlatform/SvcRestartTask&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:P(A;;FA;;;SY)(A;;FA;;;BA)(A;;FA;;;S-1-5-80-123231216-2592883651-3715271367-3753151631-4175906628)(A;;FR;;;S-1-5-87-2912274048-3994893941-1669128114-1310430903-1263774323)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers&gt;,     &lt;CalendarTrigger&gt;,       &lt;StartBoundary&gt;2025-05-04T03:31:12Z&lt;/StartBoundary&gt;,       &lt;Enabled&gt;true&lt;/Enabled&gt;,       &lt;ScheduleByDay&gt;,         &lt;DaysInterval&gt;1&lt;/DaysInterval&gt;,       &lt;/ScheduleByDay&gt;,     &lt;/CalendarTrigger&gt;,   &lt;/Triggers&gt;,   &lt;Principals&gt;,     &lt;Principal id='NetworkService'&gt;,       &lt;UserId&gt;S-1-5-20&lt;/UserId&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;false&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT0S&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,     &lt;RestartOnFailure&gt;,       &lt;Interval&gt;PT1M&lt;/Interval&gt;,       &lt;Count&gt;3&lt;/Count&gt;,     &lt;/RestartOnFailure&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='NetworkService'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{B1AEBB5D-EAD9-4476-B375-9C3ED9F32AFC}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[timer]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:37:13.3826960,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Date&gt;2010-09-30T14:53:37.9516706&lt;/Date&gt;,     &lt;URI&gt;/Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;OICI;FA;;;BA)(A;OICI;FA;;;SY)(A;OICI;GR;;;AU)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers /&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;SYSTEM&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;MaintenanceSettings&gt;,       &lt;Period&gt;P1D&lt;/Period&gt;,       &lt;Deadline&gt;P2D&lt;/Deadline&gt;,       &lt;Exclusive&gt;false&lt;/Exclusive&gt;,     &lt;/MaintenanceSettings&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{84F0FAE1-C27B-4F6F-807B-28CF6F96287D}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[/RuntimeWide]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:37:13.8369685,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64 | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Date&gt;2010-09-30T14:53:37.9516706&lt;/Date&gt;,     &lt;URI&gt;/Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;OICI;FA;;;BA)(A;OICI;FA;;;SY)(A;OICI;GR;;;AU)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers /&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;SYSTEM&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;MaintenanceSettings&gt;,       &lt;Period&gt;P1D&lt;/Period&gt;,       &lt;Deadline&gt;P2D&lt;/Deadline&gt;,       &lt;Exclusive&gt;false&lt;/Exclusive&gt;,     &lt;/MaintenanceSettings&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{429BC048-379E-45E0-80E4-EB1977941B5C}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[/RuntimeWide]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:37:13.9883813,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64 | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Date&gt;2010-09-30T14:53:37.9516706&lt;/Date&gt;,     &lt;URI&gt;/Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;OICI;FA;;;BA)(A;OICI;FA;;;SY)(A;OICI;GR;;;AU)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers /&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;SYSTEM&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;MaintenanceSettings&gt;,       &lt;Period&gt;P1D&lt;/Period&gt;,       &lt;Deadline&gt;P2D&lt;/Deadline&gt;,       &lt;Exclusive&gt;false&lt;/Exclusive&gt;,     &lt;/MaintenanceSettings&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{429BC048-379E-45E0-80E4-EB1977941B5C}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[/RuntimeWide]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:37:14.6481267,Event Time,Event Logs,EZ Tools,A scheduled task was updated,Security,"Channel: Security | Computer: DESKTOP-704R550 | TaskName: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64 | TaskContentNew: &lt;?xml version='1.0' encoding='UTF-16'?&gt;, &lt;Task version='1.6' xmlns='http://schemas.microsoft.com/windows/2004/02/mit/task'&gt;,   &lt;RegistrationInfo&gt;,     &lt;Date&gt;2010-09-30T14:53:37.9516706&lt;/Date&gt;,     &lt;URI&gt;/Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64&lt;/URI&gt;,     &lt;SecurityDescriptor&gt;D:(A;OICI;FA;;;BA)(A;OICI;FA;;;SY)(A;OICI;GR;;;AU)(A;;FRFX;;;LS)&lt;/SecurityDescriptor&gt;,   &lt;/RegistrationInfo&gt;,   &lt;Triggers /&gt;,   &lt;Principals&gt;,     &lt;Principal id='Author'&gt;,       &lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;,       &lt;UserId&gt;SYSTEM&lt;/UserId&gt;,     &lt;/Principal&gt;,   &lt;/Principals&gt;,   &lt;Settings&gt;,     &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;,     &lt;DisallowStartIfOnBatteries&gt;true&lt;/DisallowStartIfOnBatteries&gt;,     &lt;StopIfGoingOnBatteries&gt;true&lt;/StopIfGoingOnBatteries&gt;,     &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;,     &lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;,     &lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;,     &lt;IdleSettings&gt;,       &lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;,       &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;,     &lt;/IdleSettings&gt;,     &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;,     &lt;Enabled&gt;true&lt;/Enabled&gt;,     &lt;Hidden&gt;true&lt;/Hidden&gt;,     &lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;,     &lt;DisallowStartOnRemoteAppSession&gt;false&lt;/DisallowStartOnRemoteAppSession&gt;,     &lt;UseUnifiedSchedulingEngine&gt;true&lt;/UseUnifiedSchedulingEngine&gt;,     &lt;MaintenanceSettings&gt;,       &lt;Period&gt;P1D&lt;/Period&gt;,       &lt;Deadline&gt;P2D&lt;/Deadline&gt;,       &lt;Exclusive&gt;false&lt;/Exclusive&gt;,     &lt;/MaintenanceSettings&gt;,     &lt;WakeToRun&gt;false&lt;/WakeToRun&gt;,     &lt;ExecutionTimeLimit&gt;PT2H&lt;/ExecutionTimeLimit&gt;,     &lt;Priority&gt;7&lt;/Priority&gt;,   &lt;/Settings&gt;,   &lt;Actions Context='Author'&gt;,     &lt;ComHandler&gt;,       &lt;ClassId&gt;{429BC048-379E-45E0-80E4-EB1977941B5C}&lt;/ClassId&gt;,       &lt;Data&gt;&lt;![CDATA[/RuntimeWide]]&gt;&lt;/Data&gt;,     &lt;/ComHandler&gt;,   &lt;/Actions&gt;, &lt;/Task&gt;",,4702,WORKGROUP/DESKTOP-704R550$,DESKTOP-704R550,,,,,,,EventLogs/20250503224052_EvtxECmd_Output.csv,
2025-05-03T22:26:23.4601040,Created,MFT,EZ Tools,MFT Created,034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.zip,./Users/admin0x/Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.zip,zip,,,,1168765,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:29:36.4500000,Created,MFT,EZ Tools,MFT Created,OneDriveSetup.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/Update/OneDriveSetup.exe,exe,,,,89199416,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:27:14.4085419,Created,MFT,EZ Tools,MFT Created,034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.exe,./Users/admin0x/Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.exe,exe,,,,3075072,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:29:36.4502715,Created,MFT,EZ Tools,MFT Created,OneDriveSetup.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDriveSetup.exe,exe,,,,89199416,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:28:46.8200370,Created,MFT,EZ Tools,MFT Created,OneDriveUpdaterService.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDriveUpdaterService.exe,exe,,,,3841360,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:27:31.0685305,Created,MFT,EZ Tools,MFT Created,FileCoAuth.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/FileCoAuth.exe,exe,,,,2182952,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:27:31.5027812,Created,MFT,EZ Tools,MFT Created,FileSyncConfig.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/FileSyncConfig.exe,exe,,,,813376,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:27:31.7769515,Created,MFT,EZ Tools,MFT Created,FileSyncHelper.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/FileSyncHelper.exe,exe,,,,3587904,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:28:36.5156898,Created,MFT,EZ Tools,MFT Created,Microsoft.SharePoint.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/Microsoft.SharePoint.exe,exe,,,,1033032,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:28:37.8351989,Created,MFT,EZ Tools,MFT Created,Microsoft.SharePoint.NativeMessagingClient.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/Microsoft.SharePoint.NativeMessagingClient.exe,exe,,,,41256,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:28:41.6726259,Created,MFT,EZ Tools,MFT Created,OneDriveFileLauncher.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDriveFileLauncher.exe,exe,,,,396616,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:28:41.6953791,Created,MFT,EZ Tools,MFT Created,OneDriveLauncher.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDriveLauncher.exe,exe,,,,679232,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:28:41.7173048,Created,MFT,EZ Tools,MFT Created,OneDrivePatcher.exe,./Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDrivePatcher.exe,exe,,,,3484504,,,,,,FileSystem/20250503224037_MFTECmd_$MFT_Output.csv,
2025-05-03T22:27:28.3093536,Run Time,Prefetch,EZ Tools,Program Execution,034F0AF28F11A2B8BFB18CE49558A,034F0AF28F11A2B8BFB18CE49558A,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:33:41.7283100,Run Time,Prefetch,EZ Tools,Program Execution,DEFRAG.EXE,WINDOWS/SYSTEM32/DEFRAG.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:29:40.9499350,Run Time,Prefetch,EZ Tools,Program Execution,FILECOAUTH.EXE,USERS/ADMIN0X/APPDATA/LOCAL/MICROSOFT/ONEDRIVE/25.065.0406.0002/FILECOAUTH.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:29:38.1992885,Run Time,Prefetch,EZ Tools,Program Execution,FILESYNCCONFIG.EXE,USERS/ADMIN0X/APPDATA/LOCAL/MICROSOFT/ONEDRIVE/25.065.0406.0002/FILESYNCCONFIG.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:33:51.4175101,Run Time,Prefetch,EZ Tools,Program Execution,MICROSOFT.PHOTOS.EXE,PROGRAM FILES/WINDOWSAPPS/MICROSOFT.WINDOWS.PHOTOS_2019.19071.12548.0_X64__8WEKYB3D8BBWE/MICROSOFT.PHOTOS.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:29:41.5127023,Run Time,Prefetch,EZ Tools,Program Execution,MICROSOFT.SHAREPOINT.EXE,USERS/ADMIN0X/APPDATA/LOCAL/MICROSOFT/ONEDRIVE/25.065.0406.0002/MICROSOFT.SHAREPOINT.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:34.8036611,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:34.6135689,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:34.4095374,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:19.6129454,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:15.7375595,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:15.4555369,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:15.3461983,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:35:13.8152985,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/WINSXS/AMD64_NETFX4-MSCORSVW_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_7509C725E01554B3/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:12.8503997,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:32.0780773,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:30.6393599,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:30.2341914,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:30.0766979,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:13.2160203,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:12.9822029,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:05.6690151,Run Time,Prefetch,EZ Tools,Program Execution,MSCORSVW.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/MSCORSVW.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:18.4909039,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:13.1939789,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:34:46.7195146,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/MICROSOFT.NET/FRAMEWORK/V4.0.30319/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:14.6627651,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:14.5847936,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:13.9292510,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:13.8512751,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:13.7731352,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:13.2408521,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:33:50.7139677,Run Time,Prefetch,EZ Tools,Program Execution,NGEN.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGEN_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_AACE13AD8F77EB05/NGEN.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:37:14.4127382,Run Time,Prefetch,EZ Tools,Program Execution,NGENTASK.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGENTASK_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_CBD46BA524299690/NGENTASK.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:33:54.1834226,Run Time,Prefetch,EZ Tools,Program Execution,NGENTASK.EXE,WINDOWS/WINSXS/AMD64_NETFX4-NGENTASK_EXE_B03F5F7F11D50A3A_4.0.15805.285_NONE_CBD46BA524299690/NGENTASK.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:27:27.0862257,Run Time,Prefetch,EZ Tools,Program Execution,SIHCLIENT.EXE,WINDOWS/SYSTEM32/SIHCLIENT.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:26:55.0667016,Run Time,Prefetch,EZ Tools,Program Execution,UPFC.EXE,WINDOWS/SYSTEM32/UPFC.EXE,,,,,,,,,,,ProgramExecution/20250503224112_PECmd_Output_Timeline.csv,
2025-05-03T22:29:38.4492313,Last Write,Registry,EZ Tools,Program Execution,AppCompatFlags,Path: C:/Users/admin0x/Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.exe//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:38.4492313,Last Write,Registry,EZ Tools,Program Execution,AppCompatFlags,Path: C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/21.220.1024.0005/Microsoft.SharePoint.exe//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:38.4492313,Last Write,Registry,EZ Tools,Program Execution,AppCompatFlags,Path: C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/FileSyncConfig.exe//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:38.4492313,Last Write,Registry,EZ Tools,Program Execution,AppCompatFlags,Path: C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/OneDrive.exe//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:36.1524362,Last Write,Registry,EZ Tools,Program Execution,UserAssist,UEME_CTLSESSION/Last executed: /Run count: 98,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:36.1524362,Last Write,Registry,EZ Tools,Program Execution,UserAssist,Microsoft.Windows.Explorer/Last executed: 2025-05-03 03:36:35.6470000/Run count: 6,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:36.1524362,Last Write,Registry,EZ Tools,Program Execution,UserAssist,C:/Users/admin0x/Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.exe/Last executed: 2025-05-03 22:27:25.5080000/Run count: 1,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:36.1524362,Last Write,Registry,EZ Tools,Program Execution,UserAssist,SentinelOne.WinAgent/Last executed: /Run count: 0,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:36.1524362,Last Write,Registry,EZ Tools,Program Execution,UserAssist,C:/Users/admin0x/Desktop/KAPE/gkape.exe/Last executed: 2025-05-03 22:38:35.9440000/Run count: 1,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:36.1524362,Last Write,Registry,EZ Tools,Program Execution,UserAssist,C:/Users/admin0x/Desktop/KAPE/kape.exe/Last executed: /Run count: 0,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T03:36:35.6471679,Last Write,Registry,EZ Tools,Program Execution,UserAssist,UEME_CTLSESSION/Last executed: /Run count: 24,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T03:36:35.6471679,Last Write,Registry,EZ Tools,Program Execution,UserAssist,{User Pinned}/TaskBar/File Explorer.lnk/Last executed: 2025-05-03 03:36:35.6470000/Run count: 6,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T03:36:35.5692281,Last Write,Registry,EZ Tools,User Activity,FeatureUsage,3//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:41.9964424,Last Write,Registry,EZ Tools,Autoruns,RunOnce (NTUSER),C:/Windows/system32/cmd.exe /q /c del /q 'C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/Update/OneDriveSetup.exe'//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:41.9964424,Last Write,Registry,EZ Tools,Autoruns,RunOnce (NTUSER),C:/Windows/system32/cmd.exe /q /c del /q 'C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/StandaloneUpdater/OneDriveSetup.exe'//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:41.9964424,Last Write,Registry,EZ Tools,Autoruns,RunOnce (NTUSER),C:/Windows/system32/cmd.exe /q /c rmdir /s /q 'C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/21.220.1024.0005/amd64'//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:41.9964424,Last Write,Registry,EZ Tools,Autoruns,RunOnce (NTUSER),C:/Windows/system32/cmd.exe /q /c rmdir /s /q 'C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/21.220.1024.0005'//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:36.7307917,Last Write,Registry,EZ Tools,Cloud Storage,OneDrive,C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:38:16.0539945,Last Write,Registry,EZ Tools,Cloud Storage,OneDrive,2025-05-03 22:38:16.0000000//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:38.8092804,Last Write,Registry,EZ Tools,Web Browsers,Google Chrome,C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/com.microsoft.onedrive.nucleus.auth.provider.json//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:29:38.9805110,Last Write,Registry,EZ Tools,Installed Software,Add/Remove Programs Entries,KeyName: OneDriveSetup.exe DisplayName: Microsoft OneDrive DisplayVersion: 25.065.0406.0002 Publisher: Microsoft Corporation InstallDate: /Timestamp: 2025-05-03 22:29:38.9805110/InstallSource:  InstallLocation:  UninstallString: 'C:/Users/admin0x/AppData/Local/Microsoft/OneDrive/25.065.0406.0002/OneDriveSetup.exe'  /uninstall,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-03 22:29:39.0585974/Last start: , Last stop: /Path: /OneDrive Standalone Update Task-S-1-5-21-1997604072-4269234789-1972170147-1000",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.5088170/Last start: 2025-05-03 22:26:56.1761346, Last stop: 2025-05-03 22:27:03.9837927/Path: /Microsoft/Windows/CertificateServicesClient/UserTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.0717576/Last start: 2025-05-03 22:33:42.4004338, Last stop: 2025-05-03 22:33:42.6972377/Path: /Microsoft/Windows/DiskFootprint/StorageSense",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.1025801/Last start: 2025-05-03 22:33:42.4004338, Last stop: 2025-05-03 22:37:13.6789575/Path: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64 Critical",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.1181706/Last start: 2025-05-03 22:33:42.4158236, Last stop: 2025-05-03 22:33:46.6979872/Path: /Microsoft/Windows/Time Synchronization/SynchronizeTime",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.1962878/Last start: 2025-05-03 22:33:41.5094471, Last stop: /Path: /Microsoft/Windows/MemoryDiagnostic/RunFullMemoryDiagnostic",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.7275184/Last start: 2025-05-03 22:26:57.7891856, Last stop: 2025-05-03 22:27:35.0426403/Path: /Microsoft/Windows/UpdateOrchestrator/USO_UxBroker",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.7902291/Last start: 2025-05-03 22:26:57.7776049, Last stop: 2025-05-03 22:27:13.3345922/Path: /Microsoft/Windows/PushToInstall/Registration",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.8525169/Last start: 2025-05-03 22:33:41.5407293, Last stop: 2025-05-03 22:33:42.9003204/Path: /Microsoft/Windows/Speech/SpeechModelDownloadTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.8994176/Last start: 2025-05-03 22:33:55.7305584, Last stop: 2025-05-03 22:33:57.1369105/Path: /Microsoft/Windows/Flighting/OneSettings/RefreshCache",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.9463197/Last start: 2025-05-03 22:26:56.2698002, Last stop: 2025-05-03 22:27:35.3609091/Path: /Microsoft/Windows/Device Information/Device",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.3994199/Last start: 2025-05-03 22:26:55.1917749, Last stop: 2025-05-03 22:27:13.5766455/Path: /Microsoft/Windows/CertificateServicesClient/SystemTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.0244697/Last start: 2025-05-03 22:33:42.4158236, Last stop: 2025-05-03 22:33:46.9946910/Path: /Microsoft/Windows/Chkdsk/ProactiveScan",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.0557436/Last start: 2025-05-03 22:33:42.4158236, Last stop: 2025-05-03 22:33:44.4321188/Path: /Microsoft/Windows/StateRepository/MaintenanceTasks",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 13:53:08.7277123/Last start: 2025-05-03 22:26:57.1760599, Last stop: 2025-05-03 22:27:18.2060459/Path: /Microsoft/Windows/UpdateOrchestrator/Schedule Scan",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 13:57:15.4337057/Last start: 2025-05-03 22:26:57.7462689, Last stop: 2025-05-03 22:28:14.2424568/Path: /OneDrive Reporting Task-S-1-5-21-1997604072-4269234789-1972170147-1000",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.1494626/Last start: 2025-05-03 22:33:41.5564154, Last stop: 2025-05-03 22:33:54.1834226/Path: /Microsoft/Windows/DeviceDirectoryClient/IntegrityCheck",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.1650779/Last start: 2025-05-03 22:37:14.4127382, Last stop: /Path: /Microsoft/Windows/Sysmain/WsSwapAssessmentTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.8525360/Last start: 2025-05-03 22:33:42.4004338, Last stop: 2025-05-03 22:33:42.4158236/Path: /Microsoft/Windows/Work Folders/Work Folders Maintenance Work",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 13:53:25.0805025/Last start: 2025-05-03 22:26:56.4503720, Last stop: 2025-05-03 22:27:13.3240769/Path: /Microsoft/Windows/UpdateOrchestrator/Schedule Work",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.2587639/Last start: 2025-05-03 22:33:42.4324099, Last stop: 2025-05-03 22:33:56.3867873/Path: /Microsoft/Windows/DiskCleanup/SilentCleanup",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.4931507/Last start: 2025-05-03 22:33:42.4478997, Last stop: 2025-05-03 22:34:01.6853414/Path: /Microsoft/Windows/Application Experience/ProgramDataUpdater",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.4150672/Last start: 2025-05-03 22:26:55.6760508, Last stop: 2025-05-03 22:27:10.0661841/Path: /Microsoft/Windows/Windows Error Reporting/QueueReporting",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.4931507/Last start: 2025-05-03 22:31:24.4489541, Last stop: 2025-05-03 22:31:24.6675991/Path: /Microsoft/Windows/Feedback/Siuf/DmClientOnScenarioDownload",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.5400330/Last start: 2025-05-03 22:33:41.5564154, Last stop: /Path: /Microsoft/Windows/MemoryDiagnostic/ProcessMemoryDiagnosticEvents",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.6650758/Last start: 2025-05-03 22:26:56.5896082, Last stop: 2025-05-03 22:31:18.5899758/Path: /Microsoft/Windows/Application Experience/Microsoft Compatibility Appraiser",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.8681509/Last start: 2025-05-03 22:33:41.4314457, Last stop: 2025-05-03 22:33:42.5878239/Path: /Microsoft/Windows/LanguageComponentsInstaller/Installation",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.8681509/Last start: 2025-05-03 22:33:41.3844244, Last stop: 2025-05-03 22:33:59.8404494/Path: /Microsoft/Windows/Management/Provisioning/Logon",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.8837630/Last start: 2025-05-03 22:26:57.2230611, Last stop: 2025-05-03 22:27:10.1515473/Path: /Microsoft/Windows/WindowsUpdate/Scheduled Start",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.9150710/Last start: 2025-05-03 22:33:42.4478997, Last stop: 2025-05-03 22:33:46.4789337/Path: /Microsoft/Windows/Feedback/Siuf/DmClient",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:42.9462992/Last start: 2025-05-03 22:33:42.4478997, Last stop: 2025-05-03 22:33:43.5566369/Path: /Microsoft/Windows/Flighting/FeatureConfig/UsageDataReporting",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:56.7342814/Last start: 2025-05-03 22:26:56.3479274, Last stop: 2025-05-03 22:28:10.7860029/Path: /MicrosoftEdgeUpdateTaskMachineUA",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.0244276/Last start: 2025-05-03 22:26:56.1761346, Last stop: 2025-05-03 22:29:27.1198484/Path: /Microsoft/Windows/InstallService/ScanForUpdates",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.2118883/Last start: 2025-05-03 22:33:42.4478997, Last stop: 2025-05-03 22:33:54.1834226/Path: /Microsoft/Windows/WOF/WIM-Hash-Validation",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.2900344/Last start: 2025-05-03 22:33:42.4478997, Last stop: 2025-05-03 22:33:47.4169682/Path: /Microsoft/Windows/License Manager/TempSignedLicenseExchange",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.2900344/Last start: 2025-05-03 22:33:42.4627064, Last stop: 2025-05-03 22:34:43.2341854/Path: /Microsoft/Windows/InstallService/ScanForUpdatesAsUser",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.9462518/Last start: 2025-05-03 22:26:55.8484014, Last stop: 2025-05-03 22:27:00.4617228/Path: /Microsoft/Windows/LanguageComponentsInstaller/ReconcileLanguageResources",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.9618920/Last start: 2025-05-03 22:26:56.1761346, Last stop: 2025-05-03 22:27:03.3857866/Path: /Microsoft/Windows/International/Synchronize Language Settings",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-04-27 22:33:41.9315174/Last start: , Last stop: /Path: /Microsoft/Windows/Defrag/ScheduledDefrag",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.3838559/Last start: 2025-05-03 22:33:42.4785341, Last stop: 2025-05-03 22:33:46.7289407/Path: /microsoft/windows/applicationdata/appuriverifierdaily",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.3994507/Last start: 2025-05-03 22:33:42.4785341, Last stop: 2025-05-03 22:37:13.1159278/Path: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 Critical",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.5151973/Last start: 2025-05-03 22:37:14.4127382, Last stop: /Path: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.6090216/Last start: 2025-05-03 22:33:42.4944543, Last stop: 2025-05-03 22:33:45.9478108/Path: /Microsoft/Windows/Shell/IndexerAutomaticMaintenance",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:40.9936592/Last start: 2025-05-03 22:33:42.4004338, Last stop: 2025-05-03 22:33:43.9786347/Path: /Microsoft/Windows/AppxDeploymentClient/Pre-staged app cleanup",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.7184055/Last start: 2025-05-03 22:33:42.5096227, Last stop: 2025-05-03 22:33:46.3539474/Path: /Microsoft/Windows/DiskFootprint/Diagnostics",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.7808475/Last start: 2025-05-03 22:27:35.8336188, Last stop: 2025-05-03 22:27:36.0858564/Path: /Microsoft/Windows/UpdateOrchestrator/UpdateModelTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.9646286/Last start: 2025-05-03 22:37:14.4127382, Last stop: 2025-05-03 22:37:13.9908059/Path: /Microsoft/Windows/.NET Framework/.NET Framework NGEN v4.0.30319 64",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-03 22:29:39.2152807/Last start: , Last stop: /Path: /OneDrive Startup Task-S-1-5-21-1997604072-4269234789-1972170147-1000",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:43.9983900/Last start: 2025-05-03 22:37:14.4127382, Last stop: /Path: /Microsoft/Windows/Power Efficiency Diagnostics/AnalyzeSystem",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:46.1404102/Last start: 2025-05-03 22:26:56.3167673, Last stop: 2025-05-03 22:27:07.8763461/Path: /Microsoft/Windows/Application Experience/PcaPatchDbTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:44.3136730/Last start: 2025-05-03 22:33:42.5261803, Last stop: 2025-05-03 22:33:42.5723682/Path: /Microsoft/Windows/SettingSync/BackgroundUploadTask",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:56.7030260/Last start: 2025-05-03 22:26:56.5982058, Last stop: /Path: /MicrosoftEdgeUpdateTaskMachineCore",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:44.3659497/Last start: 2025-05-03 22:26:56.3479274, Last stop: 2025-05-03 22:27:13.1740003/Path: /Microsoft/Windows/Customer Experience Improvement Program/Consolidator",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:41.0088475/Last start: 2025-05-03 22:35:41.9262489, Last stop: 2025-05-03 22:35:42.3634570/Path: /Microsoft/Windows/Device Information/Device User",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:44.4054647/Last start: 2025-05-03 22:33:42.5723682, Last stop: 2025-05-03 22:33:46.4167840/Path: /Microsoft/Windows/ApplicationData/DsSvcCleanup",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:33:41.9315174,Last Write,Registry,EZ Tools,Autoruns,Scheduled Tasks (TaskCache),"Created on: 2025-05-02 15:48:44.4497726/Last start: 2025-05-03 22:33:42.5723682, Last stop: 2025-05-03 22:33:42.6972377/Path: /Microsoft/Windows/Shell/ThemesSyncedImageDownload",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:27:01.6042705,Last Write,Registry,EZ Tools,System Info,Network Configuration (IPv4),2025-05-03 22:27:01.0000000//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:27:01.6042705,Last Write,Registry,EZ Tools,System Info,Network Configuration (IPv4),2025-05-03 22:57:01.0000000//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:27:01.6042705,Last Write,Registry,EZ Tools,System Info,Network Configuration (IPv4),1746312121//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:27:01.6042705,Last Write,Registry,EZ Tools,System Info,Network Configuration (IPv4),1746312796//,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-02T15:48:27.2435271,Last Write,Registry,EZ Tools,Devices,USB,KeyName: VID_0E0F&PID_0008 SerialNumber: 000650268328 ParentIdPrefix: 7&20f38eb4&0 Service: BTHUSB/DeviceName: Generic Bluetooth Adapter FriendlyName:  Location Information: Port_#0001.Hub_#0001/Timestamp: 2025-05-03 22:26:57.8519289,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-02T15:48:27.2435271,Last Write,Registry,EZ Tools,Devices,USB,KeyName: VID_0E0F&PID_000B SerialNumber: 6&57ea747&0&1 ParentIdPrefix: 7&67b229&0 Service: usbccgp/DeviceName: USB Composite Device FriendlyName:  Location Information: Port_#0001.Hub_#0002/Timestamp: 2025-05-03 22:26:54.3948197,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-02T15:48:27.2435271,Last Write,Registry,EZ Tools,Devices,USB,KeyName: VID_0E0F&PID_000B&MI_00 SerialNumber: 7&67b229&0&0000 ParentIdPrefix:  Service: usbvideo/DeviceName: USB Video Device FriendlyName: VMware Virtual USB Video Device Location Information: 0002.0002.0000.001.000.000.000.000.000/Timestamp: 2025-05-03 22:26:56.2541803,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: Microsoft.Windows.Search_cw5n1h2txyewy/Execution time: 2025-05-03 22:39:15.4488380/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: /Device/HarddiskVolume3/Program Files (x86)/Microsoft/Edge/Application/msedge.exe/Execution time: 2025-05-03 22:37:33.7096958/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: /Device/HarddiskVolume3/Program Files/7-Zip/7zG.exe/Execution time: 2025-05-03 22:38:31.2579650/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: Microsoft.WindowsStore_8wekyb3d8bbwe/Execution time: 2025-05-03 22:30:32.4656410/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: /Device/HarddiskVolume3/Program Files/SentinelOne/Sentinel Agent 23.2.3.358/SentinelUI.exe/Execution time: 2025-05-03 22:27:46.8765015/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: /Device/HarddiskVolume3/Users/admin0x/AppData/Local/Microsoft/OneDrive/OneDrive.exe/Execution time: 2025-05-03 22:29:41.1373722/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:39:15.4488380,Last Write,Registry,EZ Tools,Program Execution,Background Activity Moderator (BAM),Program: /Device/HarddiskVolume3/Users/admin0x/Desktop/KAPE/gkape.exe/Execution time: 2025-05-03 22:38:46.5738866/,,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T03:36:23.1626168,Last Write,Registry,EZ Tools,Services,Services,"Name: BITS Desc: @%SystemRoot%/system32/qmgr.dll,-1001/Name last write: 2025-05-03 22:37:21.1793365, Parameters last write: 2019-12-07 09:15:07.8307671/Image path: %SystemRoot%/System32/svchost.exe -k netsvcs -p ServiceDLL: %SystemRoot%/System32/qmgr.dll",,,,,,,,,,,Registry/20250503224113_RECmd_Batch_Kroll_Batch_Output.csv,
2025-05-03T22:38:33.0000000,Last Write,Shellbags,EZ Tools,File & Folder Access,034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b,Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b,,,,,,,,,,,FileFolderAccess/admin0x_UsrClass.csv,
2025-05-03T22:27:21.0000000,First Interacted,Shellbags,EZ Tools,File & Folder Access,034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b,Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b,,,,,,,,,,,FileFolderAccess/admin0x_UsrClass.csv,
2025-05-03T22:27:25.5080000,Last Executed,Registry,EZ Tools,UserAssist,C:/Users/admin0x/Desktop/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b/034f0af28f11a2b8bfb18ce49558a1f3621e6f69fbb0d76fc5ff19608c04f58b.exe,P:/Hfref/nqzva0k/Qrfxgbc/034s0ns28s11n2o8oso18pr49558n1s3621r6s69soo0q76sp5ss19608p04s58o/034s0ns28s11n2o8oso18pr49558n1s3621r6s69soo0q76sp5ss19608p04s58o.rkr,,,,,,,,,,1,ROOT/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/UserAssist/{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}/Count,
